#line 1 "C:/Users/ElettroDynamisPRC/Google Drive/REPARTO ELETTRONICA 2017/STEERING WHEEL/FIRMWARE/DP9 AAC/DP9_AAC.c"
#line 22 "C:/Users/ElettroDynamisPRC/Google Drive/REPARTO ELETTRONICA 2017/STEERING WHEEL/FIRMWARE/DP9 AAC/DP9_AAC.c"
int timer2_counter0 = 0, timer2_counter1 = 0, timer2_counter2 = 0, timer2_counter3 = 0, timer2_counter4 = 0, timer2_counter5 = 0;
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.c"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for dspic/include/stdio.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 8 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.c"
void unsignedIntToString(unsigned int number, char *text) {
 emptyString(text);
 sprintf(text, "%u", number);
}

void signedIntToString(int number, char *text) {
 emptyString(text);
 sprintf(text, "%d", number);
}

void emptyString(char *myString) {
 myString[0] = '\0';
#line 23 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.c"
}

unsigned char getNumberDigitCount(unsigned char number) {
 if (number >= 100) {
 return 3;
 } else if (number >= 10) {
 return 2;
 } else {
 return 1;
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/dspic.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/dspic.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 171 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/dspic.h"
const double INSTRUCTION_PERIOD = 4.0 /  80 ;
const unsigned int PRESCALER_VALUES[] = {1, 8, 64, 256};

void setAllPinAsDigital(void);

void setInterruptPriority(unsigned char device, unsigned char priority);

void setExternalInterrupt(unsigned char device, char edge);

void switchExternalInterruptEdge(unsigned char);

char getExternalInterruptEdge(unsigned char);

void clearExternalInterrupt(unsigned char);

void setTimer(unsigned char device, double timePeriod);

void clearTimer(unsigned char device);

void turnOnTimer(unsigned char device);

void turnOffTimer(unsigned char device);

unsigned int getTimerPeriod(double timePeriod, unsigned char prescalerIndex);

unsigned char getTimerPrescaler(double timePeriod);

double getExactTimerPrescaler(double timePeriod);

void setupAnalogSampling(void);

void turnOnAnalogModule();

void turnOffAnalogModule();

void startSampling(void);

unsigned int getAnalogValue(void);

void setAnalogPIN(unsigned char pin);

void unsetAnalogPIN(unsigned char pin);

void setAnalogInterrupt(void);

void unsetAnalogInterrupt(void);

void clearAnalogInterrupt(void);


void setAutomaticSampling(void);

void unsetAutomaticSampling(void);


void setAnalogVoltageReference(unsigned char mode);

void setAnalogDataOutputFormat(unsigned char adof);

int getMinimumAnalogClockConversion(void);
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/dspic.c"
void setAllPinAsDigital(void) {
 ADPCFG = 0xFFFF;
}

void setInterruptPriority(unsigned char device, unsigned char priority) {
 switch (device) {
 case  4 :
  IPC0bits.INT0IP  = priority;
 break;
 case  5 :
  IPC4bits.INT1IP  = priority;
 break;
 case  6 :
  IPC5bits.INT2IP  = priority;
 break;
 case  8 :
  IPC9bits.INT4IP  = priority;
 break;
 case  1 :
  IPC0bits.T1IP  = priority;
 break;
 case  2 :
  IPC1bits.T2IP  = priority;
 break;
 case  3 :
  IPC5bits.T4IP  = priority;
 break;
 default:
 break;
 }
}

void setExternalInterrupt(unsigned char device, char edge) {
 setInterruptPriority(device,  4 );
 switch (device) {
 case  4 :
  INTCON2.INT0EP  = edge;
  IFS0.INT0IF  =  0 ;
  IEC0.INT0IE  =  1 ;
 break;
 case  5 :
  INTCON2.INT1EP  = edge;
  IFS1.INT1IF  =  0 ;
  IEC1.INT1IE  =  1 ;
 break;
 case  6 :
  INTCON2.INT2EP  = edge;
  IFS1.INT2IF  =  0 ;
  IEC1.INT2IE  =  1 ;
 break;
 case  8 :
  INTCON2.INT4EP  = edge;
  IFS2.INT4IF  =  0 ;
  IEC2.INT4IE  =  1 ;
 default:
 break;
 }
}

void switchExternalInterruptEdge(unsigned char device) {
 switch (device) {
 case  4 :
 if ( INTCON2.INT0EP  ==  1 ) {
  INTCON2.INT0EP  =  0 ;
 } else {
  INTCON2.INT0EP  =  1 ;
 }
 break;
 case  5 :
 if ( INTCON2.INT1EP  ==  1 ) {
  INTCON2.INT1EP  =  0 ;
 } else {
  INTCON2.INT1EP  =  1 ;
 }
 break;
 case  6 :
 if ( INTCON2.INT2EP  ==  1 ) {
  INTCON2.INT2EP  =  0 ;
 } else {
  INTCON2.INT2EP  =  1 ;
 }
 break;
 case  8 :
 if ( INTCON2.INT4EP  ==  1 ) {
  INTCON2.INT4EP  =  0 ;
 } else {
  INTCON2.INT4EP  =  1 ;
 }
 default:
 break;
 }
}

char getExternalInterruptEdge(unsigned char device) {
 switch (device) {
 case  4 :
 return  INTCON2.INT0EP ;
 case  5 :
 return  INTCON2.INT1EP ;
 case  6 :
 return  INTCON2.INT2EP ;
 case  8 :
 return  INTCON2.INT4EP ;
 default:
 return 0;
 }
}

void clearExternalInterrupt(unsigned char device) {
 switch (device) {
 case  4 :
  IFS0.INT0IF  =  0 ;
 break;
 case  5 :
  IFS1.INT1IF  =  0 ;
 break;
 case  6 :
  IFS1.INT2IF  =  0 ;
 break;
 case  8 :
  IFS2.INT4IF  =  0 ;
 default:
 break;
 }
}

void setTimer(unsigned char device, double timePeriod) {
 unsigned char prescalerIndex;
 setInterruptPriority(device,  4 );

 prescalerIndex = getTimerPrescaler(timePeriod);
 switch (device) {
 case  1 :
  T1CONbits.TCKPS  = prescalerIndex;
  PR1  = getTimerPeriod(timePeriod, prescalerIndex);
  IEC0bits.T1IE  =  1 ;
  T1CONbits.TON  =  1 ;
 break;
 case  2 :
  T2CONbits.TCKPS  = prescalerIndex;
  PR2  = getTimerPeriod(timePeriod, prescalerIndex);
  IEC0bits.T2IE  =  1 ;
  T2CONbits.TON  =  1 ;
 break;
 case  3 :
  T4CONbits.TCKPS  = prescalerIndex;
  PR4  = getTimerPeriod(timePeriod, prescalerIndex);
  IEC1bits.T4IE  =  1 ;
  T4CONbits.TON  =  1 ;
 break;
 }
}

void clearTimer(unsigned char device) {
 switch (device) {
 case  1 :
  IFS0bits.T1IF  =  0 ;
 break;
 case  2 :
  IFS0bits.T2IF  =  0 ;
 break;
 case  3 :
  IFS1bits.T4IF  =  0 ;
 break;
 }
}

void turnOnTimer(unsigned char device) {
 switch (device) {
 case  1 :
  T1CONbits.TON  =  1 ;
 break;
 case  2 :
  T2CONbits.TON  =  1 ;
 break;
 case  3 :
  T4CONbits.TON  =  1 ;
 break;
 }
}

void turnOffTimer(unsigned char device) {
 switch (device) {
 case  1 :
  T1CONbits.TON  =  0 ;
 break;
 case  2 :
  T2CONbits.TON  =  0 ;
 break;
 case  3 :
  T4CONbits.TON  =  0 ;
 break;
 }
}

unsigned int getTimerPeriod(double timePeriod, unsigned char prescalerIndex) {
 return (unsigned int) ((timePeriod * 1000000) / (INSTRUCTION_PERIOD * PRESCALER_VALUES[prescalerIndex]));
}

unsigned char getTimerPrescaler(double timePeriod) {
 unsigned char i;
 double exactTimerPrescaler;
 exactTimerPrescaler = getExactTimerPrescaler(timePeriod);
 for (i = 0; i < sizeof(PRESCALER_VALUES); i += 1) {
 if ((int) exactTimerPrescaler < PRESCALER_VALUES[i]) {
 return i;
 }
 }
 i -= 1;

 return i;
}

double getExactTimerPrescaler(double timePeriod) {
 return (timePeriod * 1000000) / (INSTRUCTION_PERIOD *  65535 );
}

void setupAnalogSampling(void) {
  ADCON1bits.SSRC  =  7 ;
  ADCON1bits.FORM  =  0 ;
  ADCON1bits.ADSIDL  =  0 ;
  ADCON2bits.CSCNA  =  1 ;
  ADCON2bits.BUFM  =  0 ;
  ADCON2bits.ALTS  =  0 ;
  ADCON3bits.ADRC  =  0 ;
  ADCHSbits.CH0NB  =  0 ;
  ADCHSbits.CH0NA  =  0 ;
  ADCHSbits.CH0SB  = 0;
  ADCHSbits.CH0SA  = 0;


  ADCON3bits.ADCS  = getMinimumAnalogClockConversion();
  ADCON3bits.SAMC  = 1;

  ADPCFG  = 0b1111111111111111;
  ADCSSL  = 0;

 setAutomaticSampling();
 setAnalogVoltageReference( 0 );
 unsetAnalogInterrupt();
 startSampling();
}

void turnOnAnalogModule() {
  ADCON1bits.ADON  =  1 ;
}

void turnOffAnalogModule() {
  ADCON1bits.ADON  =  0 ;
}

void startSampling(void) {
  ADCON1bits.SAMP  =  1 ;
}

unsigned int getAnalogValue(void) {
 return  ADCBUF0 ;
}

void setAnalogPIN(unsigned char pin) {
  ADPCFG  =  ADPCFG  & ~(int) ( 1  << pin);
  ADCSSL  =  ADCSSL  | ( 1  << pin);
}

void unsetAnalogPIN(unsigned char pin) {
  ADPCFG  =  ADPCFG  | ( 1  << pin);
  ADCSSL  =  ADCSSL  & ~(int) ( 1  << pin);
}

void setAnalogInterrupt(void) {
 clearAnalogInterrupt();
  IEC0bits.ADIE  =  1 ;
}

void unsetAnalogInterrupt(void) {
 clearAnalogInterrupt();
  IEC0bits.ADIE  =  0 ;
}

void clearAnalogInterrupt(void) {
  IFS0bits.ADIF  =  0 ;
}

void setAutomaticSampling(void) {
  ADCON1bits.ASAM  =  1 ;
}

void unsetAutomaticSampling(void) {
  ADCON1bits.ASAM  =  0 ;
}

void setAnalogVoltageReference(unsigned char mode) {
  ADCON2bits.VCFG  = mode;
}

void setAnalogDataOutputFormat(unsigned char adof) {
  ADCON1bits.FORM  = adof;
}

int getMinimumAnalogClockConversion(void) {
 return (int) (( 154  *  80 ) / 500.0);
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eeprom.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eeprom.h"









void EEPROM_writeInt(unsigned int address, unsigned int value);

unsigned int EEPROM_readInt(unsigned int address);

void EEPROM_writeArray(unsigned int address, unsigned int *values);

void EEPROM_readArray(unsigned int address, unsigned int *values);
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eeprom.c"
void EEPROM_writeInt(unsigned int address, unsigned int value) {
 unsigned int currentValue;


 EEPROM_write(address, value);
 while(WR_bit);


}

unsigned int EEPROM_readInt(unsigned int address) {
 return EEPROM_read(address);
}

void EEPROM_writeArray(unsigned int address, unsigned int *values) {
 unsigned int i;
 for (i = 0; i < sizeof(values); i += 1) {
 EEPROM_writeInt(address, values[i]);
 }
}

void EEPROM_readArray(unsigned int address, unsigned int *values) {
 unsigned int i;
 for (i = 0; i < sizeof(values); i += 1) {
 values[i] = EEPROM_read(address + i);
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for dspic/include/string.h"





void * memchr(void *p, char n, unsigned int v);
int memcmp(void *s1, void *s2, int n);
void * memcpy(void * d1, void * s1, int n);
void * memmove(void * to, void * from, int n);
void * memset(void * p1, char character, int n);
char * strcat(char * to, char * from);
char * strchr(char * ptr, char chr);
int strcmp(char * s1, char * s2);
char * strcpy(char * to, char * from);
int strlen(char * s);
char * strncat(char * to, char * from, int size);
char * strncpy(char * to, char * from, int size);
int strspn(char * str1, char * str2);
char strcspn(char * s1, char * s2);
int strncmp(char * s1, char * s2, char len);
char * strpbrk(char * s1, char * s2);
char * strrchr(char *ptr, char chr);
char * strstr(char * s1, char * s2);
char * strtok(char * s1, char * s2);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.h"
#line 34 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.h"
float EGLCD_TIMER_COEFFICIENT = 4;
#line 55 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.h"
unsigned char BLACK, WHITE;
const unsigned char INVERT =  2 ;





void eGlcd_init(void);

void eGlcd_invertColors(void);

void eGlcd_clear(void);

void eGlcd_fill(unsigned char color);

void eGlcd_overwriteChar(char oldChar, char newChar, unsigned char x, unsigned char y);

void eGlcd_clearChar(char letter, unsigned char x, unsigned char y);

void eGlcd_writeChar(char letter, unsigned char x, unsigned char y);

void eGlcd_overwriteText(char *oldText, char *newText, unsigned char x, unsigned char y);

void eGlcd_clearText(char *text, unsigned char x, unsigned char y);

void eGlcd_writeText(char *text, unsigned char x, unsigned char y);

void eGlcd_setupTimer(void);

void eGlcd_setTimerCoefficient(float coefficient);

unsigned int eGlcd_getTextPixelLength(char *text);
#line 97 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.h"
void xGlcd_Set_Font(const char *ptrFontTbl, unsigned short font_width,
 unsigned short font_height, unsigned int font_offset);

void xGLCD_Write_Data(unsigned short pX, unsigned short pY, unsigned short pData);

unsigned short xGlcd_Write_Char(unsigned short ch, unsigned short x, unsigned short y, unsigned short color);

unsigned short xGlcd_Char_Width(unsigned short ch);

void xGlcd_Write_Text(char *text, unsigned short x, unsigned short y, unsigned short color);

unsigned short xGlcd_Text_Width(char *text);

void xGLCD_Set_Transparency(char active);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/dspic.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/glcdpins.c"

 sbit GLCD_D0 at RB8_bit;
 sbit GLCD_D1 at RB0_bit;
 sbit GLCD_D2 at RB1_bit;
 sbit GLCD_D3 at RB2_bit;
 sbit GLCD_D4 at RB3_bit;
 sbit GLCD_D5 at RB4_bit;
 sbit GLCD_D6 at RB5_bit;
 sbit GLCD_D7 at RG9_bit;

 sbit GLCD_D0_Direction at TRISB8_bit;
 sbit GLCD_D1_Direction at TRISB0_bit;
 sbit GLCD_D2_Direction at TRISB1_bit;
 sbit GLCD_D3_Direction at TRISB2_bit;
 sbit GLCD_D4_Direction at TRISB3_bit;
 sbit GLCD_D5_Direction at TRISB4_bit;
 sbit GLCD_D6_Direction at TRISB5_bit;
 sbit GLCD_D7_Direction at TRISG9_bit;

 sbit GLCD_CS1 at LATG8_bit;
 sbit GLCD_CS2 at LATG7_bit;
 sbit GLCD_RST at LATG6_bit;
 sbit GLCD_RW at LATC2_bit;
 sbit GLCD_RS at LATC1_bit;
 sbit GLCD_EN at LATG15_bit;

 sbit GLCD_CS1_Direction at TRISG8_bit;
 sbit GLCD_CS2_Direction at TRISG7_bit;
 sbit GLCD_RST_Direction at TRISG6_bit;
 sbit GLCD_RW_Direction at TRISC2_bit;
 sbit GLCD_RS_Direction at TRISC1_bit;
 sbit GLCD_EN_Direction at TRISG15_bit;
#line 20 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
const unsigned short xColorClear = 0;
const unsigned short xColorSet = 1;
const unsigned short xColorInvert = 2;


const char *xGlcdSelFont;

unsigned short xGlcdX, xGlcdY, xGlcdSelFontHeight,
 xGlcdSelFontWidth, xGlcdSelFontOffset,
 xGlcdSelFontNbRows;

char xGLCD_Transparency;

void eGlcd_init() {
 BLACK =  1 ;
 WHITE =  0 ;
 Glcd_Init();
 if ( 80  >  80 ) {
 eGlcd_setupTimer();
 }
}

void eGlcd_invertColors(void) {
 if (BLACK ==  0 ) {
 BLACK =  1 ;
 WHITE =  0 ;
 } else {
 BLACK =  0 ;
 WHITE =  1 ;
 }
}

void eGlcd_clear(void) {
 eGlcd_fill(WHITE);
}

void eGlcd_fill(unsigned char color) {
 if (color) {
  Glcd_Fill(0xFF) ;
 } else {
  Glcd_Fill(0x00) ;
 }
}


void eGlcd_overwriteChar(char oldChar, char newChar, unsigned char x, unsigned char y) {
 eGlcd_clearChar(oldChar, x, y);
 eGlcd_writeChar(newChar, x, y);
}

void eGlcd_clearChar(char letter, unsigned char x, unsigned char y) {
 if (BLACK) {
 xGlcd_Write_Char(letter, x, y, WHITE);
 } else {
 xGLCD_Set_Transparency( 1 );
 xGlcd_Write_Char(letter, x, y, WHITE);
 xGLCD_Set_Transparency( 0 );
 }
}

void eGlcd_writeChar(char letter, unsigned char x, unsigned char y) {
 if (BLACK) {
 xGlcd_Write_Char(letter, x, y, BLACK);
 } else {
 xGlcd_Write_Char(letter, x, y, INVERT);
 }
}

void eGlcd_overwriteText(char *oldText, char *newText, unsigned char x, unsigned char y) {
 eGlcd_clearText(oldText, x, y);
 eGlcd_writeText(newText, x, y);
}

void eGlcd_clearText(char *text, unsigned char x, unsigned char y) {
 if (BLACK) {
 xGlcd_Write_Text(text, x, y, WHITE);
 } else {
 xGLCD_Set_Transparency( 1 );
 xGlcd_Write_Text(text, x, y, WHITE);
 xGLCD_Set_Transparency( 0 );
 }
}

void eGlcd_writeText(char *text, unsigned char x, unsigned char y) {
 if (BLACK) {
 xGlcd_Write_Text(text, x, y, BLACK);
 } else {
 xGlcd_Write_Text(text, x, y, INVERT);
 }
}

void eGlcd_setupTimer(void) {
 setTimer( 3 ,  ( ((6.2 - 4) / (80 - 64))  * (0.025 * EGLCD_TIMER_COEFFICIENT * 10) * ( (4/ ((6.2 - 4) / (80 - 64)) ) + 80  - 80 ))  * 0.000001);
 setInterruptPriority( 3 ,  5 );
 turnOffTimer( 3 );
}

void eGlcd_setTimerCoefficient(float coefficient) {
 EGLCD_TIMER_COEFFICIENT = coefficient;
}

unsigned int eGlcd_getTextPixelLength(char *text) {
 unsigned int textPixelLength, i;
 textPixelLength = 0;
 for (i = 0; i < strlen(text); i += 1) {
 textPixelLength = textPixelLength + xGlcd_Char_Width(text[i]);
 }
 return textPixelLength;
}






void xGlcd_Set_Font(const char *ptrFontTbl, unsigned short font_width,
 unsigned short font_height, unsigned int font_offset) {
 xGlcdSelFont = ptrFontTbl;
 xGlcdSelFontWidth = font_width;
 xGlcdSelFontHeight = font_height;
 xGlcdSelFontOffset = font_offset;
 xGLCD_Transparency =  0 ;
 xGlcdSelFontNbRows = xGlcdSelFontHeight / 8;
 if (xGlcdSelFontHeight % 8) xGlcdSelFontNbRows++;
}


void xGLCD_Write_Data(unsigned short pX, unsigned short pY, unsigned short pData) {
 unsigned short tmp, tmpY, gData, dataR, xx, yy;

 if ((pX > 127) || (pY > 63)) return;
 xx = pX % 64;
 tmp = pY / 8;
 if (tmp > 7) return;
 tmpY = pY % 8;
 if (tmpY) {

 gData = pData << tmpY;
  Glcd_Set_Side(pX); Glcd_Set_X(xx); Glcd_Set_Page(tmp); dataR = Glcd_Read_Data(); dataR = Glcd_Read_Data(); ;
#line 163 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
 if (!xGLCD_Transparency)
 dataR = dataR & (0xff >> (8 - tmpY));
 dataR = gData | dataR;
  Glcd_Set_X(xx); Glcd_Write_Data(dataR); ;
#line 169 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
 tmp++;
 if (tmp > 7) return;
  Glcd_Set_X(xx); Glcd_Set_Page(tmp); gData = pData >> (8 - tmpY); dataR = Glcd_Read_Data(); dataR = Glcd_Read_Data(); ;
#line 176 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
 if (!xGLCD_Transparency)
 dataR = dataR & (0xff << tmpY);
 dataR = gData | dataR;
  Glcd_Set_X(xx); Glcd_Write_Data(dataR); ;
#line 181 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
 }
 else {
  Glcd_Set_Side(pX); Glcd_Set_X(xx); Glcd_Set_Page(tmp); ;
#line 186 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
 if (xGLCD_Transparency) {
  dataR = Glcd_Read_Data(); dataR = Glcd_Read_Data(); dataR = pData | dataR; ;
#line 190 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
 }
 else
 dataR = pData;
  Glcd_Set_X(xx); Glcd_Write_Data(dataR); ;
#line 195 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/eglcd.c"
 }
}

unsigned short xGlcd_Write_Char(unsigned short ch, unsigned short x, unsigned short y, unsigned short color) {
 const char *CurCharData;
 unsigned short i, j, CharWidth, CharData;
 unsigned long cOffset;

 cOffset = xGlcdSelFontWidth * xGlcdSelFontNbRows + 1;
 cOffset = cOffset * (ch - xGlcdSelFontOffset);
 CurCharData = xGlcdSelFont + cOffset;
 CharWidth = *CurCharData;
 cOffset++;
 for (i = 0; i < CharWidth; i++)
 for (j = 0; j < xGlcdSelFontNbRows; j++) {
 CurCharData = xGlcdSelFont + (i * xGlcdSelFontNbRows) + j + cOffset;
 switch (color) {
 case 0 :
 CharData = 0;
 break;
 case 1 :
 CharData = *CurCharData;
 break;
 case 2 :
 CharData = ~(*CurCharData);
 break;
 }
 xGLCD_Write_Data(x + i, y + j * 8, CharData);
 };
 return CharWidth;
}

unsigned short xGlcd_Char_Width(unsigned short ch) {
 const char *CurCharDt;
 unsigned long cOffset;
 cOffset = xGlcdSelFontWidth * xGlcdSelFontNbRows + 1;
 cOffset = cOffset * (ch - xGlcdSelFontOffset);
 CurCharDt = xGlcdSelFont + cOffset;
 return *CurCharDt;
}

void xGlcd_Write_Text(char *text, unsigned short x, unsigned short y, unsigned short color) {
 unsigned short i, l, posX;
 char *curChar;
 l = strlen(text);
 posX = x;
 curChar = text;
 for (i = 0; i < l; i++) {
 posX = posX + xGlcd_Write_Char(*curChar, posX, y, color) + 1;
 curChar++;
 }
}

unsigned short xGlcd_Text_Width(char *text) {
 unsigned short i, l, w;
 l = strlen(text);
 w = 0;
 for (i = 0; i < l; i++)
 w = w + xGlcd_Char_Width(text[i]) + 1;
 return w;
}

void xGLCD_Set_Transparency(char active) {
 xGLCD_Transparency = active;
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/music.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/music.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/dspic.h"
#line 11 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/music.h"
char Music_hasToMakeSound(void);

void Music_tick(void);

void Music_setSongTime(unsigned int time);

void Music_playSong(unsigned char song[], unsigned int songLength);

void Music_playSongNextNote(void);

void Music_playNote(unsigned char note, unsigned char duration);

float Music_getActualNoteDuration(unsigned char duration);

float Music_getNoteFrequency(unsigned char note);

char music_isPlaying =  0 ;
char music_isPlayingNote =  0 ;
unsigned char *music_song;
unsigned int music_songTime, music_songLength;
const float MUSIC_NOTE_TABLE[] = {
 261.63, 277.18, 293.66, 311.13, 329.63, 349.23,
 369.99, 392.00, 415.30, 440.00, 466.16, 493.88, 523.25, 554.37,
 587.33, 622.25, 659.25, 698.46, 739.99, 783.99,
 830.61, 880.00, 932.33, 987.77, 1046.50, 1108.73,
 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98,
 1661.22, 1760.00, 1864.66, 1975.53};
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/songs/amourtoujour.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/songs/../music.h"
#line 10 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/songs/amourtoujour.h"
const unsigned int AMOR_TOUJOUR_TEMPO = 120;
const unsigned char AMOR_TOUJOUR_SONG[] = {
  19 ,  8 ,
  200 ,  16 ,
  19 ,  8 ,
  19 ,  4 ,
  27 ,  4 ,
  26 ,  8 ,
  200 ,  8 ,
  26 ,  8 ,
  26 ,  4 ,
  27 ,  4 ,
  24 ,  8 ,
  200 ,  8 
};
const unsigned int AMOR_TOUJOUR_LENGTH = sizeof(AMOR_TOUJOUR_SONG);
#line 8 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/music.c"
unsigned int music_tickCounter = 0;
unsigned int music_currentNote = 0;
unsigned int music_trentaduesimoTicks = 0;

char Music_hasToMakeSound(void) {
 return music_isPlayingNote && (music_tickCounter > music_trentaduesimoTicks);
}

void Music_tick(void) {
 if (music_tickCounter > 0) {
 music_tickCounter -= 1;
 if (music_tickCounter == 0) {
 Music_playSongNextNote();
 }
 }
}

void Music_setSongTime(unsigned int time) {
 music_songTime = time;
}

void Music_playSong(unsigned char song[], unsigned int songLength) {
 music_song = song;
 music_songLength = songLength;
 music_isPlaying =  1 ;
 music_currentNote = 0;
 Music_playSongNextNote();
}

void Music_playSongNextNote(void) {
 unsigned char note, duration;
 if (music_currentNote < music_songLength) {
 note = *(music_song + music_currentNote);
 duration = *(music_song + music_currentNote + 1);
 Music_playNote(note, duration);
 music_currentNote += 2;
 } else {
 music_isPlaying =  0 ;
 }
}

void Music_playNote(unsigned char note, unsigned char duration) {
 float timerPeriod;
 if (note ==  200 ) {
 music_isPlayingNote =  0 ;
 timerPeriod = 0.001;
 } else {
 music_isPlayingNote =  1 ;
 timerPeriod = 1.0 / Music_getNoteFrequency(note);
 }
 music_tickCounter = (unsigned int) (Music_getActualNoteDuration(duration) / timerPeriod);
 music_trentaduesimoTicks = (unsigned int) (Music_getActualNoteDuration( 1 ) / timerPeriod);
 setTimer( 3 , timerPeriod);
}

float Music_getActualNoteDuration(unsigned char duration) {
 return ((float) duration / (float) music_songTime) * 7.5;
}

float Music_getNoteFrequency(unsigned char note) {
 return MUSIC_NOTE_TABLE[note];
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/libs/songs/amourtoujour.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_menu.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_menu.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../dd_graphic_controller.h"
#line 48 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../dd_graphic_controller.h"
const unsigned char INTERFACE_LIST[] = {
  1 ,
  0 ,
  20 ,
  10 ,
  11 ,
  12 ,
  2 ,
  3 ,
  4 ,
  5 
};

const unsigned char SCREEN_X_MIDDLE =  128  / 2;
const unsigned char SCREEN_Y_MIDDLE =  64  / 2;

const double FRAME_PERIOD = 1.0 /  10 ;

void dd_GraphicController_init(void);

void dd_GraphicController_turnOnBacklight(void);

void dd_GraphicController_turnOffBacklight(void);

void dd_GraphicController_switchBacklight(void);

void dd_GraphicController_setInterface(unsigned char interface);

unsigned char dd_GraphicController_getInterface(void);

char dd_GraphicController_isInterfaceChangedFromLastFrame(void);

void dd_GraphicController_switchNextInterface(void);

void dd_GraphicController_switchPreviousInterface(void);

void dd_GraphicController_switchLastInterface(void);

void dd_GraphicController_saveInterfaceIndex(void);

void dd_GraphicController_printFrame(void);

void dd_GraphicController_forceFullFrameUpdate(void);

void dd_GraphicController_forceNextFrameUpdate(void);

char dd_GraphicController_isFrameUpdateForced(void);

void dd_GraphicController_releaseFullFrameUpdate(void);

void dd_GraphicController_invertColors(void);

char dd_GraphicController_isNextFrameUpdateForced(void);

char dd_GraphicController_areColorsInverted(void);

void dd_GraphicController_queueColorInversion(void);

char dd_GraphicController_isColorInversionQueued(void);

void dd_GraphicController_handleAlert(void);

void dd_GraphicController_timerSetup(void);

void dd_GraphicController_onTimerInterrupt(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../../libs/eglcd.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../../libs/dspic.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_gears.h"
#line 13 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_gears.h"
const unsigned short DynamisFont_Gears40x59[] = {
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF,
 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
 0xFF, 0x03, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xF0, 0xFF, 0x0F, 0x00, 0x80, 0xFF, 0x7F, 0x00, 0xF8,
 0x7F, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0xFC, 0x1F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x01, 0xFC, 0x07, 0x00,
 0x00, 0x00, 0x00, 0xFF, 0x01, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x03, 0xFE, 0x01, 0x00, 0x00, 0x00,
 0x00, 0xFC, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
 0x07, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x7F,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0xF0, 0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
 0x03, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x03, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x03, 0xFC,
 0x07, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0xFC, 0x1F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x01, 0xF8, 0x7F, 0x00,
 0x00, 0x00, 0xF0, 0xFF, 0x00, 0xF0, 0xFF, 0x0F, 0x00, 0x80, 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0x3F, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F,
 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
 0x80, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x7F, 0x00, 0x00, 0x00,
 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0xF0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x03,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x80, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00,
 0xE0, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x03, 0x00, 0xFF, 0x00,
 0x00, 0x00, 0x00, 0xFF, 0x03, 0xC0, 0xFF, 0x01, 0x00, 0x00, 0x80, 0xFF, 0x03, 0xE0, 0xFF, 0x01, 0x00, 0x00,
 0xE0, 0xFF, 0x03, 0xF0, 0xFF, 0x01, 0x00, 0x00, 0xF0, 0xFF, 0x03, 0xF8, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0xFF,
 0x03, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x03, 0xFC, 0x07, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x03, 0xFC,
 0x03, 0x00, 0x00, 0x00, 0xFE, 0xFB, 0x03, 0xFE, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xF9, 0x03, 0xFE, 0x01, 0x00,
 0x00, 0x80, 0xFF, 0xF8, 0x03, 0xFE, 0x00, 0x00, 0x00, 0xC0, 0x7F, 0xF8, 0x03, 0xFF, 0x00, 0x00, 0x00, 0xE0,
 0x3F, 0xF8, 0x03, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0x1F, 0xF8, 0x03, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0xF8,
 0x03, 0x7F, 0x00, 0x00, 0x00, 0xF8, 0x07, 0xF8, 0x03, 0x7F, 0x00, 0x00, 0x00, 0xFC, 0x03, 0xF8, 0x03, 0x7F,
 0x00, 0x00, 0x00, 0xFE, 0x03, 0xF8, 0x03, 0x7F, 0x00, 0x00, 0x00, 0xFF, 0x01, 0xF8, 0x03, 0x7F, 0x00, 0x00,
 0x80, 0xFF, 0x00, 0xF8, 0x03, 0x7F, 0x00, 0x00, 0xC0, 0x7F, 0x00, 0xF8, 0x03, 0xFF, 0x00, 0x00, 0xE0, 0x3F,
 0x00, 0xF8, 0x03, 0xFE, 0x00, 0x00, 0xF0, 0x1F, 0x00, 0xF8, 0x03, 0xFE, 0x01, 0x00, 0xF8, 0x0F, 0x00, 0xF8,
 0x03, 0xFE, 0x01, 0x00, 0xFC, 0x07, 0x00, 0xF8, 0x03, 0xFE, 0x03, 0x00, 0xFF, 0x07, 0x00, 0xF8, 0x03, 0xFC,
 0x07, 0xC0, 0xFF, 0x03, 0x00, 0xF8, 0x03, 0xF8, 0x1F, 0xF0, 0xFF, 0x00, 0x00, 0xF8, 0x03, 0xF8, 0xFF, 0xFF,
 0x7F, 0x00, 0x00, 0xF8, 0x03, 0xF0, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xF8, 0x03, 0xE0, 0xFF, 0xFF, 0x1F, 0x00,
 0x00, 0xF8, 0x03, 0xC0, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0xF8, 0x03, 0x80, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0xF8,
 0x03, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x60, 0x00,
 0x00, 0x00, 0xF8, 0x01, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0xF8, 0x07, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00,
 0xFC, 0x0F, 0x00, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0xFC, 0x1F, 0x00, 0xE0, 0xFF, 0x00, 0x00, 0x00, 0xFC, 0x3F,
 0x00, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0xFC, 0x7F, 0x00, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0xF8,
 0x3F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x01, 0xFC, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0xFE, 0x03, 0x00,
 0x00, 0x00, 0x00, 0xFE, 0x03, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00,
 0x00, 0xF8, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x07, 0xFF, 0x00, 0x00, 0x7E, 0x00, 0x00, 0xF0,
 0x07, 0x7F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F,
 0x00, 0x00, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00,
 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0xFF, 0x00, 0x80, 0x3F, 0x00,
 0x00, 0xF0, 0x07, 0xFE, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0xF8, 0x07, 0xFE, 0x01, 0xC0, 0x7F, 0x00, 0x00, 0xF8,
 0x03, 0xFE, 0x01, 0xE0, 0xFF, 0x00, 0x00, 0xF8, 0x03, 0xFC, 0x03, 0xF0, 0xFF, 0x00, 0x00, 0xFC, 0x03, 0xFC,
 0x0F, 0xFC, 0xFB, 0x01, 0x00, 0xFE, 0x01, 0xF8, 0xFF, 0xFF, 0xFB, 0x03, 0x00, 0xFF, 0x01, 0xF0, 0xFF, 0xFF,
 0xF9, 0x07, 0x80, 0xFF, 0x00, 0xF0, 0xFF, 0xFF, 0xF0, 0x1F, 0xF0, 0xFF, 0x00, 0xE0, 0xFF, 0xFF, 0xF0, 0xFF,
 0xFF, 0x7F, 0x00, 0x80, 0xFF, 0x3F, 0xE0, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFE, 0x1F, 0xC0, 0xFF, 0xFF, 0x1F,
 0x00, 0x00, 0xF8, 0x03, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x1F, 0x00, 0x00,
 0x28, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x80, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF,
 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x0F, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xE3, 0x0F, 0x00, 0x00, 0x00,
 0x00, 0xC0, 0xFF, 0xE1, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF8,
 0x3F, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x1F, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0xE0,
 0x0F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x03, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x01, 0xE0, 0x0F, 0x00,
 0x00, 0x00, 0xF0, 0xFF, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00,
 0xFC, 0x1F, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x80, 0xFF, 0x03,
 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xC0, 0xFF, 0x01, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0x00, 0xE0,
 0x0F, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0x03, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFE,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFE, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xE0,
 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00,
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x70, 0x00, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x00, 0xF8, 0x07, 0x00, 0x00, 0x00, 0xFC, 0x7F, 0x00,
 0xFC, 0x0F, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x00, 0xFC, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFC, 0x7F,
 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x00, 0xFC, 0x7F, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0xF0, 0xFF, 0x00, 0xFE,
 0xFF, 0xFF, 0x7F, 0x00, 0x80, 0xFF, 0x01, 0xFE, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFF, 0x01, 0xFE, 0xFF, 0x8F,
 0x1F, 0x00, 0x00, 0xFE, 0x03, 0xFE, 0x7F, 0x80, 0x1F, 0x00, 0x00, 0xFC, 0x03, 0xFE, 0x01, 0xC0, 0x0F, 0x00,
 0x00, 0xF8, 0x03, 0xFE, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0xF8, 0x07, 0xFE, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xF0,
 0x07, 0xFE, 0x00, 0xE0, 0x07, 0x00, 0x00, 0xF0, 0x07, 0xFE, 0x00, 0xF0, 0x07, 0x00, 0x00, 0xF0, 0x07, 0xFE,
 0x00, 0xF0, 0x07, 0x00, 0x00, 0xF0, 0x07, 0xFE, 0x00, 0xF0, 0x07, 0x00, 0x00, 0xF0, 0x07, 0xFE, 0x00, 0xF0,
 0x07, 0x00, 0x00, 0xF0, 0x07, 0xFE, 0x00, 0xF0, 0x07, 0x00, 0x00, 0xF0, 0x07, 0xFE, 0x00, 0xF0, 0x07, 0x00,
 0x00, 0xF0, 0x07, 0xFE, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0xF8, 0x07, 0xFE, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0xF8,
 0x03, 0xFE, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xFC, 0x03, 0xFE, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0xFC, 0x03, 0xFE,
 0x00, 0xE0, 0x3F, 0x00, 0x00, 0xFE, 0x01, 0xFE, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0xFF, 0x01, 0xFE, 0x00, 0xC0,
 0xFF, 0x00, 0xC0, 0xFF, 0x00, 0xFE, 0x00, 0x80, 0xFF, 0x07, 0xF8, 0x7F, 0x00, 0xFE, 0x00, 0x00, 0xFF, 0xFF,
 0xFF, 0x3F, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x1F, 0x00, 0xFE, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x0F,
 0x00, 0xFE, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x01, 0x00, 0x00,
 0x00, 0x00, 0xC0, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00,
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0xF8, 0xFF,
 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0x0F, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0xE0, 0xFF, 0x1F, 0xF0, 0x0F, 0xF8, 0x3F,
 0x00, 0xF0, 0xFF, 0x01, 0xF8, 0x03, 0xE0, 0x7F, 0x00, 0xF0, 0x7F, 0x00, 0xFC, 0x00, 0x80, 0xFF, 0x00, 0xF8,
 0x1F, 0x00, 0x7E, 0x00, 0x00, 0xFF, 0x00, 0xFC, 0x07, 0x00, 0x3F, 0x00, 0x00, 0xFE, 0x01, 0xFC, 0x03, 0x80,
 0x3F, 0x00, 0x00, 0xFC, 0x01, 0xFE, 0x01, 0x80, 0x1F, 0x00, 0x00, 0xF8, 0x03, 0xFE, 0x01, 0xC0, 0x1F, 0x00,
 0x00, 0xF8, 0x03, 0xFE, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0xF8, 0x03, 0xFF, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0xF0,
 0x07, 0x7F, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xF0, 0x07, 0x7F,
 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0xE0,
 0x0F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0xE0, 0x0F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0xE0, 0x0F, 0x00,
 0x00, 0xF0, 0x07, 0xFF, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0xF8, 0x07, 0xFF, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0xF8,
 0x03, 0xFE, 0x01, 0xC0, 0x3F, 0x00, 0x00, 0xFC, 0x03, 0xFE, 0x01, 0xC0, 0x3F, 0x00, 0x00, 0xFC, 0x03, 0xFE,
 0x03, 0xC0, 0x7F, 0x00, 0x00, 0xFE, 0x01, 0xFC, 0x0F, 0x80, 0xFF, 0x00, 0x00, 0xFF, 0x01, 0xFC, 0x3F, 0x80,
 0xFF, 0x01, 0xC0, 0xFF, 0x00, 0xF8, 0xFF, 0x00, 0xFF, 0x0F, 0xF0, 0xFF, 0x00, 0xF0, 0xFF, 0x00, 0xFE, 0xFF,
 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00, 0xC0, 0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0x1F,
 0x00, 0x80, 0x7F, 0x00, 0xF0, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x7E, 0x00, 0xC0, 0xFF, 0xFF, 0x03, 0x00, 0x00,
 0x70, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00,
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x03, 0xFE, 0x00, 0x00,
 0x00, 0x00, 0xF8, 0xFF, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x03, 0xFE, 0x00, 0x00, 0x00, 0xE0,
 0xFF, 0xFF, 0x03, 0xFE, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x03, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
 0x03, 0xFE, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0x1F, 0x00, 0xFE, 0x00, 0x00, 0xF8, 0xFF, 0x7F, 0x00, 0x00, 0xFE,
 0x00, 0x00, 0xFC, 0xFF, 0x07, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x00, 0xC0,
 0xFF, 0x1F, 0x00, 0x00, 0x00, 0xFE, 0x00, 0xF0, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xFE, 0x00, 0xF8, 0xFF, 0x00,
 0x00, 0x00, 0x00, 0xFE, 0x00, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x00,
 0x00, 0xFE, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xE0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFC, 0x03,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x7F, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFE, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0xFC, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0x03, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0xFF, 0x1F, 0x80, 0xFF,
 0xFF, 0x0F, 0x00, 0x80, 0xFF, 0x3F, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0xE0, 0xFF, 0x7F, 0xE0, 0xFF, 0xFF, 0x3F,
 0x00, 0xF0, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0x7F, 0x00, 0xF8, 0xFF, 0xFF, 0xF9, 0x1F, 0xE0, 0xFF, 0x00, 0xF8,
 0xFF, 0xFF, 0xF9, 0x07, 0x80, 0xFF, 0x01, 0xFC, 0x0F, 0xFC, 0xFB, 0x03, 0x00, 0xFF, 0x01, 0xFC, 0x03, 0xF0,
 0xFF, 0x01, 0x00, 0xFE, 0x03, 0xFE, 0x01, 0xE0, 0xFF, 0x00, 0x00, 0xFC, 0x03, 0xFE, 0x00, 0xC0, 0x7F, 0x00,
 0x00, 0xF8, 0x03, 0xFE, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0xF8, 0x03, 0xFF, 0x00, 0xC0, 0x3F, 0x00, 0x00, 0xF8,
 0x07, 0x7F, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F,
 0x00, 0x80, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x80,
 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x80, 0x3F, 0x00,
 0x00, 0xF0, 0x07, 0xFF, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0xF0, 0x07, 0xFE, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0xF8,
 0x03, 0xFE, 0x01, 0xC0, 0x7F, 0x00, 0x00, 0xF8, 0x03, 0xFE, 0x01, 0xE0, 0xFF, 0x00, 0x00, 0xFC, 0x03, 0xFC,
 0x03, 0xF0, 0xFF, 0x01, 0x00, 0xFE, 0x03, 0xFC, 0x0F, 0xFC, 0xFB, 0x03, 0x00, 0xFF, 0x01, 0xF8, 0xFF, 0xFF,
 0xFB, 0x07, 0x80, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0xF9, 0x1F, 0xE0, 0xFF, 0x00, 0xF0, 0xFF, 0xFF, 0xF0, 0xFF,
 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0x7F, 0xE0, 0xFF, 0xFF, 0x3F, 0x00, 0x80, 0xFF, 0x3F, 0xC0, 0xFF, 0xFF, 0x1F,
 0x00, 0x00, 0xFF, 0x1F, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xF8, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0x00, 0x00,
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF,
 0x0F, 0x00, 0x70, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x3F, 0x00, 0xF0, 0x03, 0x00, 0x80, 0xFF, 0xFF, 0x7F, 0x00,
 0xF0, 0x0F, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0xF8, 0x1F, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0x7F,
 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0x7F, 0x00, 0xF8, 0xFF, 0x80, 0xFF, 0x07, 0xF8, 0xFF, 0x00, 0xFC,
 0x1F, 0x00, 0xFC, 0x0F, 0xE0, 0xFF, 0x01, 0xFC, 0x07, 0x00, 0xF8, 0x0F, 0x00, 0xFF, 0x01, 0xFE, 0x03, 0x00,
 0xF0, 0x1F, 0x00, 0xFE, 0x03, 0xFE, 0x01, 0x00, 0xE0, 0x1F, 0x00, 0xFC, 0x03, 0xFE, 0x01, 0x00, 0xC0, 0x3F,
 0x00, 0xF8, 0x07, 0xFF, 0x00, 0x00, 0xC0, 0x3F, 0x00, 0xF8, 0x07, 0xFF, 0x00, 0x00, 0xC0, 0x3F, 0x00, 0xF0,
 0x07, 0x7F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0xF0, 0x07, 0x7F,
 0x00, 0x00, 0x80, 0x3F, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00,
 0x80, 0x3F, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0xF0, 0x07, 0x7F, 0x00, 0x00, 0x80, 0x1F,
 0x00, 0xF8, 0x03, 0x7E, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0xF8, 0x03, 0xFE, 0x00, 0x00, 0xC0, 0x0F, 0x00, 0xFC,
 0x03, 0xFE, 0x00, 0x00, 0xC0, 0x0F, 0x00, 0xFC, 0x01, 0xFC, 0x01, 0x00, 0xE0, 0x07, 0x00, 0xFE, 0x01, 0xFC,
 0x03, 0x00, 0xF0, 0x03, 0x80, 0xFF, 0x00, 0xF8, 0x07, 0x00, 0xF8, 0x03, 0xE0, 0xFF, 0x00, 0xF0, 0x0F, 0x00,
 0xFC, 0x01, 0xFC, 0x7F, 0x00, 0xF0, 0x7F, 0x80, 0x7F, 0xC0, 0xFF, 0x3F, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0x1F, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03,
 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00,
 0xC0, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0x00, 0x00,
 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFE, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF,
 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x3F, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x03, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0xE0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
 0xFE, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF,
 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x0F,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x7C,
 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0,
 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00,
 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00,
 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C,
 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0,
 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00,
 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00,
 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C,
 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0,
 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00,
 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00,
 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x7C,
 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00
};
#line 245 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_gears.h"
const unsigned short Arial63x62[] = {
 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x7C,
 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0,
 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00,
 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00,
 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C,
 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0,
 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00,
 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00,
 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C,
 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0,
 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00,
 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00,
 0x00, 0x7C, 0x00, 0xC0, 0x07, 0x00, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x7C,
 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00,
};
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_big.h"
#line 13 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_big.h"
const unsigned short DynamisFont_Big32x31[] = {
 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00,
 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01,
 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00,
 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00,
 0xFE, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0xF8, 0x01, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x11, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x03, 0x00, 0xF0, 0xFF, 0x1F, 0x00, 0xF8, 0xFF, 0x3F, 0x00, 0x7C,
 0x00, 0x7C, 0x00, 0x1C, 0x00, 0x70, 0x00, 0x1E, 0x00, 0xF0, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x0E, 0x00, 0xE0,
 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x1E, 0x00, 0xF0, 0x00, 0x1C, 0x00, 0x70, 0x00, 0x7C,
 0x00, 0x7C, 0x00, 0xF8, 0xFF, 0x3F, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x80, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xC0,
 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00,
 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0xFE, 0xFF, 0xFF, 0x00, 0xFE, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x10, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xC0, 0x00, 0x78, 0x00, 0xF0, 0x00, 0x7C, 0x00, 0xF8, 0x00, 0x1C,
 0x00, 0xFC, 0x00, 0x1E, 0x00, 0xEE, 0x00, 0x0E, 0x00, 0xE7, 0x00, 0x0E, 0x00, 0xE3, 0x00, 0x0E, 0x80, 0xE3,
 0x00, 0x0E, 0xC0, 0xE1, 0x00, 0x0E, 0xE0, 0xE0, 0x00, 0x1E, 0x70, 0xE0, 0x00, 0x3C, 0x3C, 0xE0, 0x00, 0xFC,
 0x1F, 0xE0, 0x00, 0xF8, 0x0F, 0xE0, 0x00, 0xE0, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x11, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x0C, 0x00, 0x70, 0x00, 0x1C, 0x00, 0x78, 0x00, 0x3C, 0x00, 0x3C,
 0x00, 0x78, 0x00, 0x1C, 0x00, 0x70, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0,
 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x1E, 0x1E, 0xE0, 0x00, 0x1C, 0x3F, 0x70, 0x00, 0xFC,
 0x7F, 0x78, 0x00, 0xF8, 0xF3, 0x3F, 0x00, 0xE0, 0xE1, 0x1F, 0x00, 0x00, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0xC0, 0x07, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00,
 0x78, 0x07, 0x00, 0x00, 0x3C, 0x07, 0x00, 0x00, 0x1F, 0x07, 0x00, 0x80, 0x07, 0x07, 0x00, 0xC0, 0x03, 0x07,
 0x00, 0xF0, 0x01, 0x07, 0x00, 0x78, 0x00, 0x07, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0xFE, 0xFF, 0xFF, 0x00, 0xFE,
 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x0C, 0x00, 0xF0, 0x1F, 0x3C, 0x00, 0xFE, 0x1F, 0x3C, 0x00, 0xFE,
 0x0D, 0x78, 0x00, 0x0E, 0x0E, 0xF0, 0x00, 0x0E, 0x06, 0xE0, 0x00, 0x0E, 0x07, 0xE0, 0x00, 0x0E, 0x07, 0xE0,
 0x00, 0x0E, 0x07, 0xE0, 0x00, 0x0E, 0x07, 0xE0, 0x00, 0x0E, 0x07, 0xE0, 0x00, 0x0E, 0x0E, 0x70, 0x00, 0x0E,
 0x1E, 0x78, 0x00, 0x0E, 0xFC, 0x3F, 0x00, 0x0E, 0xF8, 0x1F, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03, 0x00, 0xE0, 0xFF, 0x0F, 0x00, 0xF0, 0xFF, 0x3F, 0x00, 0xF8,
 0x38, 0x3C, 0x00, 0x3C, 0x1C, 0x70, 0x00, 0x1C, 0x1C, 0xF0, 0x00, 0x0E, 0x0E, 0xE0, 0x00, 0x0E, 0x0E, 0xE0,
 0x00, 0x0E, 0x0E, 0xE0, 0x00, 0x0E, 0x0E, 0xE0, 0x00, 0x0E, 0x0E, 0xE0, 0x00, 0x1E, 0x1E, 0x70, 0x00, 0x3C,
 0x3C, 0x78, 0x00, 0x7C, 0xF8, 0x3F, 0x00, 0x78, 0xF0, 0x1F, 0x00, 0x60, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0E,
 0x00, 0x00, 0x00, 0x0E, 0x00, 0xF0, 0x00, 0x0E, 0x00, 0xFF, 0x00, 0x0E, 0xC0, 0xFF, 0x00, 0x0E, 0xF0, 0x0F,
 0x00, 0x0E, 0xFC, 0x00, 0x00, 0x0E, 0x3F, 0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0xCE, 0x03, 0x00, 0x00, 0xEE,
 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0x00, 0xF0, 0xE1, 0x1F, 0x00, 0xF8, 0xF3, 0x3F, 0x00, 0xFC,
 0x77, 0x78, 0x00, 0x1C, 0x3E, 0x70, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0,
 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x0E, 0x1C, 0xE0, 0x00, 0x1C, 0x3E, 0x70, 0x00, 0xFC,
 0x77, 0x78, 0x00, 0xF8, 0xF3, 0x3F, 0x00, 0xE0, 0xE1, 0x1F, 0x00, 0x00, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x11, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0F, 0x0C, 0x00, 0xF0, 0x1F, 0x3C, 0x00, 0xF8, 0x3F, 0x7C, 0x00, 0x3C,
 0x78, 0x78, 0x00, 0x1C, 0xF0, 0xF0, 0x00, 0x0E, 0xE0, 0xE0, 0x00, 0x0E, 0xE0, 0xE0, 0x00, 0x0E, 0xE0, 0xE0,
 0x00, 0x0E, 0xE0, 0xE0, 0x00, 0x0E, 0xE0, 0xE0, 0x00, 0x0E, 0x60, 0x70, 0x00, 0x1C, 0x70, 0x78, 0x00, 0x38,
 0x38, 0x3E, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0xE0, 0xFF, 0x0F, 0x00, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x3C, 0xF0, 0x00, 0x00, 0x3C, 0xF0, 0x00, 0x00, 0x3C, 0xF0, 0x00, 0x00, 0x3C, 0xF0,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x1F, 0xF0, 0xFF, 0xFF,
 0x1F, 0x30, 0x00, 0x00, 0x19, 0x30, 0x00, 0x00, 0x19, 0x30, 0x00, 0x00, 0x19, 0x3C, 0x00, 0x00, 0x19, 0x3C,
 0x00, 0x80, 0x18, 0x3C, 0x00, 0x80, 0x18, 0x3C, 0x00, 0x80, 0x18, 0x3C, 0x00, 0x80, 0x18, 0x3C, 0x00, 0x00,
 0x19, 0x3C, 0x00, 0x00, 0x19, 0x3C, 0x00, 0x00, 0x19, 0x30, 0x00, 0x00, 0x19, 0x30, 0x00, 0x80, 0x18, 0x30,
 0x00, 0x80, 0x18, 0xF0, 0xFF, 0xFF, 0x1F, 0xF0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x80, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0xF8, 0x0F,
 0x00, 0x00, 0xFC, 0x1F, 0x00, 0x00, 0xDE, 0x3D, 0x00, 0x00, 0xCF, 0x79, 0x00, 0x80, 0xC7, 0xF1, 0x00, 0x80,
 0xC3, 0xE1, 0x00, 0x80, 0xC1, 0xC1, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01,
 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00,
 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0xC0, 0x01,
 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00,
 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C,
 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00,
 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00,
 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xC0, 0xE0, 0x60,
 0x00, 0xC0, 0xE1, 0x70, 0x00, 0xC0, 0xE3, 0x78, 0x00, 0x80, 0xE7, 0x3C, 0x00, 0x00, 0xEF, 0x1E, 0x00, 0x00,
 0xFE, 0x0F, 0x00, 0x00, 0xFC, 0x07, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0xE0, 0x00,
 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00,
 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00,
 0x00, 0xC0, 0x01, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70,
 0x00, 0x3C, 0x07, 0x70, 0x00, 0x3E, 0x07, 0x70, 0x00, 0x3F, 0x07, 0x70, 0x80, 0x07, 0x00, 0xE0, 0xC0, 0x03,
 0x00, 0xE0, 0xE1, 0x01, 0x00, 0xC0, 0xFF, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00
};
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_terminal.h"
#line 13 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_terminal.h"
const unsigned short DynamisFont_Terminal6x8[] = {
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x06, 0x5F, 0x06, 0x00,
 0x00, 0x07, 0x03, 0x00, 0x07, 0x03,
 0x00, 0x24, 0x7E, 0x24, 0x7E, 0x24,
 0x00, 0x24, 0x2B, 0x6A, 0x12, 0x00,
 0x00, 0x63, 0x13, 0x08, 0x64, 0x63,
 0x00, 0x36, 0x49, 0x56, 0x20, 0x50,
 0x00, 0x00, 0x07, 0x03, 0x00, 0x00,
 0x00, 0x00, 0x3E, 0x41, 0x00, 0x00,
 0x00, 0x00, 0x41, 0x3E, 0x00, 0x00,
 0x00, 0x08, 0x3E, 0x1C, 0x3E, 0x08,
 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,
 0x00, 0x00, 0xE0, 0x60, 0x00, 0x00,
 0x00, 0x08, 0x08, 0x08, 0x08, 0x08,
 0x00, 0x00, 0x60, 0x60, 0x00, 0x00,
 0x00, 0x20, 0x10, 0x08, 0x04, 0x02,
 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,
 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,
 0x00, 0x62, 0x51, 0x49, 0x49, 0x46,
 0x00, 0x22, 0x49, 0x49, 0x49, 0x36,
 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,
 0x00, 0x2F, 0x49, 0x49, 0x49, 0x31,
 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,
 0x00, 0x01, 0x71, 0x09, 0x05, 0x03,
 0x00, 0x36, 0x49, 0x49, 0x49, 0x36,
 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,
 0x00, 0x00, 0x6C, 0x6C, 0x00, 0x00,
 0x00, 0x00, 0xEC, 0x6C, 0x00, 0x00,
 0x00, 0x08, 0x14, 0x22, 0x41, 0x00,
 0x00, 0x24, 0x24, 0x24, 0x24, 0x24,
 0x00, 0x00, 0x41, 0x22, 0x14, 0x08,
 0x00, 0x02, 0x01, 0x59, 0x09, 0x06,
 0x00, 0x3E, 0x41, 0x5D, 0x55, 0x1E,
 0x00, 0x7E, 0x11, 0x11, 0x11, 0x7E,
 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,
 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,
 0x00, 0x7F, 0x41, 0x41, 0x41, 0x3E,
 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,
 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,
 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,
 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,
 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,
 0x00, 0x30, 0x40, 0x40, 0x40, 0x3F,
 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,
 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,
 0x00, 0x7F, 0x02, 0x04, 0x02, 0x7F,
 0x00, 0x7F, 0x02, 0x04, 0x08, 0x7F,
 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,
 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,
 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,
 0x00, 0x7F, 0x09, 0x09, 0x19, 0x66,
 0x00, 0x26, 0x49, 0x49, 0x49, 0x32,
 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,
 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,
 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,
 0x00, 0x3F, 0x40, 0x3C, 0x40, 0x3F,
 0x00, 0x63, 0x14, 0x08, 0x14, 0x63,
 0x00, 0x07, 0x08, 0x70, 0x08, 0x07,
 0x00, 0x71, 0x49, 0x45, 0x43, 0x00,
 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,
 0x00, 0x02, 0x04, 0x08, 0x10, 0x20,
 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,
 0x00, 0x04, 0x02, 0x01, 0x02, 0x04,
 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
 0x00, 0x00, 0x03, 0x07, 0x00, 0x00,
 0x00, 0x20, 0x54, 0x54, 0x54, 0x78,
 0x00, 0x7F, 0x44, 0x44, 0x44, 0x38,
 0x00, 0x38, 0x44, 0x44, 0x44, 0x28,
 0x00, 0x38, 0x44, 0x44, 0x44, 0x7F,
 0x00, 0x38, 0x54, 0x54, 0x54, 0x08,
 0x00, 0x08, 0x7E, 0x09, 0x09, 0x00,
 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,
 0x00, 0x7F, 0x04, 0x04, 0x78, 0x00,
 0x00, 0x00, 0x00, 0x7D, 0x40, 0x00,
 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,
 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,
 0x00, 0x00, 0x00, 0x7F, 0x40, 0x00,
 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,
 0x00, 0x7C, 0x04, 0x04, 0x78, 0x00,
 0x00, 0x38, 0x44, 0x44, 0x44, 0x38,
 0x00, 0xFC, 0x44, 0x44, 0x44, 0x38,
 0x00, 0x38, 0x44, 0x44, 0x44, 0xFC,
 0x00, 0x44, 0x78, 0x44, 0x04, 0x08,
 0x00, 0x08, 0x54, 0x54, 0x54, 0x20,
 0x00, 0x04, 0x3E, 0x44, 0x24, 0x00,
 0x00, 0x3C, 0x40, 0x20, 0x7C, 0x00,
 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,
 0x00, 0x3C, 0x60, 0x30, 0x60, 0x3C,
 0x00, 0x6C, 0x10, 0x10, 0x6C, 0x00,
 0x00, 0x9C, 0xA0, 0x60, 0x3C, 0x00,
 0x00, 0x64, 0x54, 0x54, 0x4C, 0x00,
 0x00, 0x08, 0x3E, 0x41, 0x41, 0x00,
 0x00, 0x00, 0x00, 0x77, 0x00, 0x00,
 0x00, 0x00, 0x41, 0x41, 0x3E, 0x08,
 0x00, 0x02, 0x01, 0x02, 0x01, 0x00,
 0x00, 0x3C, 0x26, 0x23, 0x26, 0x3C
};
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_xterminal.h"
#line 13 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_xterminal.h"
const unsigned short DynamisFont_xTerminal6x8[] = {
 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x00, 0x00, 0x06, 0x5F, 0x06, 0x00,
 0x06, 0x00, 0x07, 0x03, 0x00, 0x07, 0x03,
 0x06, 0x00, 0x24, 0x7E, 0x24, 0x7E, 0x24,
 0x05, 0x00, 0x24, 0x2B, 0x6A, 0x12, 0x00,
 0x06, 0x00, 0x63, 0x13, 0x08, 0x64, 0x63,
 0x06, 0x00, 0x36, 0x49, 0x56, 0x20, 0x50,
 0x04, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00,
 0x04, 0x00, 0x00, 0x3E, 0x41, 0x00, 0x00,
 0x04, 0x00, 0x00, 0x41, 0x3E, 0x00, 0x00,
 0x06, 0x00, 0x08, 0x3E, 0x1C, 0x3E, 0x08,
 0x06, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,
 0x04, 0x00, 0x00, 0xE0, 0x60, 0x00, 0x00,
 0x06, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08,
 0x04, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00,
 0x06, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02,
 0x06, 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,
 0x05, 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,
 0x06, 0x00, 0x62, 0x51, 0x49, 0x49, 0x46,
 0x06, 0x00, 0x22, 0x49, 0x49, 0x49, 0x36,
 0x06, 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,
 0x06, 0x00, 0x2F, 0x49, 0x49, 0x49, 0x31,
 0x06, 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,
 0x06, 0x00, 0x01, 0x71, 0x09, 0x05, 0x03,
 0x06, 0x00, 0x36, 0x49, 0x49, 0x49, 0x36,
 0x06, 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,
 0x04, 0x00, 0x00, 0x6C, 0x6C, 0x00, 0x00,
 0x04, 0x00, 0x00, 0xEC, 0x6C, 0x00, 0x00,
 0x05, 0x00, 0x08, 0x14, 0x22, 0x41, 0x00,
 0x06, 0x00, 0x24, 0x24, 0x24, 0x24, 0x24,
 0x06, 0x00, 0x00, 0x41, 0x22, 0x14, 0x08,
 0x06, 0x00, 0x02, 0x01, 0x59, 0x09, 0x06,
 0x06, 0x00, 0x3E, 0x41, 0x5D, 0x55, 0x1E,
 0x06, 0x00, 0x7E, 0x11, 0x11, 0x11, 0x7E,
 0x06, 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,
 0x06, 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,
 0x06, 0x00, 0x7F, 0x41, 0x41, 0x41, 0x3E,
 0x06, 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,
 0x06, 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,
 0x06, 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,
 0x06, 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,
 0x05, 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,
 0x06, 0x00, 0x30, 0x40, 0x40, 0x40, 0x3F,
 0x06, 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,
 0x06, 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,
 0x06, 0x00, 0x7F, 0x02, 0x04, 0x02, 0x7F,
 0x06, 0x00, 0x7F, 0x02, 0x04, 0x08, 0x7F,
 0x06, 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,
 0x06, 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,
 0x06, 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,
 0x06, 0x00, 0x7F, 0x09, 0x09, 0x19, 0x66,
 0x06, 0x00, 0x26, 0x49, 0x49, 0x49, 0x32,
 0x06, 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,
 0x06, 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,
 0x06, 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,
 0x06, 0x00, 0x3F, 0x40, 0x3C, 0x40, 0x3F,
 0x06, 0x00, 0x63, 0x14, 0x08, 0x14, 0x63,
 0x06, 0x00, 0x07, 0x08, 0x70, 0x08, 0x07,
 0x05, 0x00, 0x71, 0x49, 0x45, 0x43, 0x00,
 0x05, 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,
 0x06, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20,
 0x05, 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,
 0x06, 0x00, 0x04, 0x02, 0x01, 0x02, 0x04,
 0x06, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
 0x04, 0x00, 0x00, 0x03, 0x07, 0x00, 0x00,
 0x06, 0x00, 0x20, 0x54, 0x54, 0x54, 0x78,
 0x06, 0x00, 0x7F, 0x44, 0x44, 0x44, 0x38,
 0x06, 0x00, 0x38, 0x44, 0x44, 0x44, 0x28,
 0x06, 0x00, 0x38, 0x44, 0x44, 0x44, 0x7F,
 0x06, 0x00, 0x38, 0x54, 0x54, 0x54, 0x08,
 0x05, 0x00, 0x08, 0x7E, 0x09, 0x09, 0x00,
 0x06, 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,
 0x05, 0x00, 0x7F, 0x04, 0x04, 0x78, 0x00,
 0x05, 0x00, 0x00, 0x00, 0x7D, 0x40, 0x00,
 0x05, 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,
 0x05, 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,
 0x05, 0x00, 0x00, 0x00, 0x7F, 0x40, 0x00,
 0x06, 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,
 0x05, 0x00, 0x7C, 0x04, 0x04, 0x78, 0x00,
 0x06, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38,
 0x06, 0x00, 0xFC, 0x44, 0x44, 0x44, 0x38,
 0x06, 0x00, 0x38, 0x44, 0x44, 0x44, 0xFC,
 0x06, 0x00, 0x44, 0x78, 0x44, 0x04, 0x08,
 0x06, 0x00, 0x08, 0x54, 0x54, 0x54, 0x20,
 0x05, 0x00, 0x04, 0x3E, 0x44, 0x24, 0x00,
 0x05, 0x00, 0x3C, 0x40, 0x20, 0x7C, 0x00,
 0x06, 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,
 0x06, 0x00, 0x3C, 0x60, 0x30, 0x60, 0x3C,
 0x05, 0x00, 0x6C, 0x10, 0x10, 0x6C, 0x00,
 0x05, 0x00, 0x9C, 0xA0, 0x60, 0x3C, 0x00,
 0x05, 0x00, 0x64, 0x54, 0x54, 0x4C, 0x00,
 0x05, 0x00, 0x08, 0x3E, 0x41, 0x41, 0x00,
 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00,
 0x06, 0x00, 0x00, 0x41, 0x41, 0x3E, 0x08,
 0x05, 0x00, 0x02, 0x01, 0x02, 0x01, 0x00,
 0x06, 0x00, 0x3C, 0x26, 0x23, 0x26, 0x3C
};
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_dashboard.h"
#line 13 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/font_dynamis_dashboard.h"
const unsigned short DynamisFont_Dashboard16x16[] = {
 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0xFE, 0x1B, 0xFE, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x07, 0x00, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0x30, 0x1F, 0xF0, 0x1F, 0xFE, 0x03, 0x3E, 0x1F, 0xF0, 0x1F, 0xFE, 0x03, 0x3E, 0x03, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0x38, 0x06, 0x7C, 0x0E, 0xE6, 0x18, 0xFF, 0x3F, 0xC6, 0x19, 0x8C, 0x0F, 0x08, 0x07, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0F, 0x3C, 0x00, 0x7E, 0x00, 0x42, 0x00, 0x42, 0x10, 0x7E, 0x18, 0x3C, 0x0E, 0x80, 0x07, 0xE0, 0x01, 0x70,
 0x00, 0x1C, 0x0F, 0x8E, 0x1F, 0x82, 0x10, 0x80, 0x10, 0x80, 0x1F, 0x00, 0x0F, 0x00, 0x00,
 0x0C, 0x00, 0x00, 0x00, 0x07, 0x9C, 0x0F, 0xFE, 0x18, 0x66, 0x18, 0xE6, 0x19, 0xE6, 0x1B, 0x3E, 0x0F, 0x1C,
 0x0E, 0x80, 0x0F, 0x00, 0x1D, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x00, 0x00, 0xE0, 0x0F, 0xFC, 0x7F, 0x1E, 0xF0, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x04, 0x02, 0x80, 0x1E, 0xF0, 0xFC, 0x7F, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x14, 0x00, 0x14, 0x00, 0x0E, 0x00, 0x14, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xF8, 0x07, 0xF8, 0x07, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0x00, 0x98, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x04, 0x00, 0x1C, 0xF0, 0x1F, 0xFE, 0x03, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xF8, 0x07, 0xFC, 0x0F, 0x0E, 0x1C, 0x06, 0x18, 0x06, 0x18, 0x0E, 0x1C, 0xFC, 0x0F, 0xF8, 0x07, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x00, 0x00, 0x30, 0x00, 0x18, 0x00, 0x0C, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x18, 0x18, 0x1C, 0x1C, 0x0E, 0x1E, 0x06, 0x1B, 0x86, 0x1B, 0xC6, 0x19, 0xFC, 0x18, 0x38, 0x18, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x08, 0x06, 0x0C, 0x0E, 0x06, 0x1C, 0x66, 0x18, 0x66, 0x18, 0xE6, 0x1C, 0xFE, 0x0F, 0x9C, 0x07, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x07, 0x80, 0x07, 0xE0, 0x06, 0x70, 0x06, 0x1C, 0x06, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x06, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xF0, 0x06, 0xFE, 0x0E, 0x7E, 0x1C, 0x66, 0x18, 0x66, 0x18, 0xE6, 0x1C, 0xC6, 0x0F, 0x80, 0x07, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xF0, 0x03, 0xFC, 0x0F, 0xCE, 0x1C, 0x66, 0x18, 0x66, 0x18, 0xE6, 0x18, 0xCE, 0x0F, 0x8C, 0x07, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x06, 0x00, 0x06, 0x00, 0x06, 0x1E, 0xC6, 0x1F, 0xF6, 0x03, 0x3E, 0x00, 0x0E, 0x00, 0x06, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x38, 0x07, 0xFC, 0x0F, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xFC, 0x0F, 0x38, 0x07, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x78, 0x0C, 0xFC, 0x1C, 0xC6, 0x19, 0x86, 0x19, 0x86, 0x19, 0xCE, 0x1C, 0xFC, 0x0F, 0xF0, 0x03, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x04, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x04, 0x00, 0x00, 0x00, 0x00, 0x30, 0x98, 0x30, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x80, 0x00, 0xC0, 0x01, 0xC0, 0x01, 0x60, 0x03, 0x60, 0x03, 0x30, 0x06, 0x30, 0x06, 0x18, 0x0C, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0xB0, 0x01, 0xB0, 0x01, 0xB0, 0x01, 0xB0, 0x01, 0xB0, 0x01, 0xB0, 0x01, 0xB0, 0x01, 0xB0, 0x01, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x18, 0x0C, 0x30, 0x06, 0x30, 0x06, 0x60, 0x03, 0x60, 0x03, 0xC0, 0x01, 0xC0, 0x01, 0x80, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0x18, 0x00, 0x1C, 0x00, 0x0E, 0x00, 0x86, 0x1B, 0xC6, 0x1B, 0xE6, 0x00, 0x7C, 0x00, 0x38,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x10, 0x00, 0x00, 0xC0, 0x0F, 0xF0, 0x3F, 0x78, 0x70, 0x9C, 0xEF, 0xEC, 0xDF, 0x66, 0x98, 0x36, 0x98, 0x36,
 0x98, 0x36, 0x8C, 0xE6, 0x9F, 0xF6, 0x9F, 0x7C, 0xD8, 0x1C, 0xCC, 0xF8, 0x67, 0xE0, 0x23,
 0x0B, 0x00, 0x10, 0x00, 0x1E, 0xC0, 0x0F, 0xF8, 0x03, 0x3E, 0x03, 0x06, 0x03, 0x3E, 0x03, 0xF8, 0x03, 0xC0,
 0x0F, 0x00, 0x1E, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xFE,
 0x19, 0xBC, 0x0F, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x0E,
 0x1C, 0x1C, 0x0E, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x0C,
 0x0C, 0xFC, 0x0F, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xC6,
 0x18, 0xC6, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x00, 0x06,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x06, 0x18, 0x86, 0x19, 0x86, 0x19, 0x8E,
 0x1D, 0x9C, 0x0F, 0x88, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0,
 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x06, 0x00, 0x0E, 0x00, 0x1C, 0x00, 0x18, 0x00, 0x18, 0x00, 0x1C, 0xFE, 0x0F, 0xFE, 0x07, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x80, 0x01, 0xC0, 0x00, 0x60, 0x00, 0xF0, 0x00, 0xD8, 0x03, 0x0C,
 0x0F, 0x06, 0x1C, 0x02, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00,
 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0C, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x1E, 0x00, 0xF8, 0x01, 0xC0, 0x0F, 0x00, 0x1E, 0xC0, 0x0F, 0xF8,
 0x01, 0x1E, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x1C, 0x00, 0x38, 0x00, 0xE0, 0x00, 0xC0, 0x01, 0x00, 0x07, 0x00,
 0x0E, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x06, 0x18, 0x0C,
 0x0C, 0xFC, 0x0F, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x00, 0xEE, 0x00, 0x7C,
 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xF0, 0x03, 0xFC, 0x0F, 0x0C, 0x0C, 0x06, 0x18, 0x06, 0x1A, 0x06, 0x1E, 0x06, 0x0C, 0x0C,
 0x1C, 0xFC, 0x3F, 0xF0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0C, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x00, 0xC6, 0x01, 0xC6, 0x03, 0x6E,
 0x0F, 0x7C, 0x1E, 0x38, 0x18, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x00, 0x38, 0x06, 0x7C, 0x0E, 0x66, 0x1C, 0xE6, 0x18, 0xC6, 0x18, 0xC6, 0x18, 0xCE, 0x1D, 0x9C,
 0x0F, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x06, 0x00, 0x06, 0x00, 0x06,
 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x00, 0x00, 0xFE, 0x07, 0xFE, 0x0F, 0x00, 0x1C, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00,
 0x1C, 0xFE, 0x0F, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0B, 0x06, 0x00, 0x1E, 0x00, 0xF8, 0x00, 0xE0, 0x03, 0x00, 0x1F, 0x00, 0x1C, 0x00, 0x1F, 0xE0, 0x03, 0xF8,
 0x00, 0x1E, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0F, 0x06, 0x00, 0x3E, 0x00, 0xFC, 0x01, 0xC0, 0x1F, 0x00, 0x1E, 0xF0, 0x1F, 0xFE, 0x01, 0x0E, 0x00, 0xFE,
 0x01, 0xF0, 0x1F, 0x00, 0x1E, 0xC0, 0x1F, 0xF8, 0x03, 0x3E, 0x00, 0x06, 0x00, 0x00, 0x00,
 0x0A, 0x00, 0x00, 0x06, 0x18, 0x0E, 0x1C, 0x3C, 0x0F, 0xF0, 0x03, 0xE0, 0x01, 0xF0, 0x03, 0x3C, 0x0F, 0x0E,
 0x1C, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0A, 0x06, 0x00, 0x0E, 0x00, 0x3C, 0x00, 0x70, 0x00, 0xC0, 0x1F, 0xC0, 0x1F, 0x70, 0x00, 0x3C, 0x00, 0x0E,
 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x18, 0x06, 0x1C, 0x06, 0x1F, 0x86, 0x1B, 0xE6, 0x19, 0x76, 0x18, 0x3E, 0x18, 0x0E, 0x18, 0x06,
 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x00, 0x00, 0xFE, 0xFF, 0xFE, 0xFF, 0x06, 0xC0, 0x06, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x04, 0x0E, 0x00, 0xFE, 0x03, 0xF0, 0x1F, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00,
 0x04, 0x06, 0xC0, 0x06, 0xC0, 0xFE, 0xFF, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x40, 0x00, 0x70, 0x00, 0x3C, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x3C, 0x00, 0x70, 0x00, 0x40, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00,
 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x02, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0x60, 0x0E, 0x70, 0x1F, 0x30, 0x1B, 0xB0, 0x19, 0xB0, 0x19, 0xF0, 0x0F, 0xE0, 0x1F, 0x00,
 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x60, 0x0C, 0x30, 0x18, 0x30, 0x18, 0x70, 0x1C, 0xE0, 0x0F, 0xC0,
 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0xC0, 0x07, 0xE0, 0x0F, 0x70, 0x1C, 0x30, 0x18, 0x30, 0x18, 0x70, 0x1C, 0x60, 0x0C, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xC0, 0x07, 0xE0, 0x0F, 0x70, 0x1C, 0x30, 0x18, 0x30, 0x18, 0x60, 0x0C, 0xFE, 0x1F, 0xFE,
 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0xC0, 0x07, 0xE0, 0x0F, 0xB0, 0x1D, 0xB0, 0x19, 0xB0, 0x19, 0xE0, 0x0D, 0xC0, 0x05, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x30, 0x00, 0xFC, 0x1F, 0xFE, 0x1F, 0x36, 0x00, 0x36, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xC0, 0x67, 0xE0, 0xEF, 0x70, 0xDC, 0x30, 0xD8, 0x30, 0xD8, 0x60, 0xCC, 0xF0, 0xFF, 0xF0,
 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x60, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0xF0, 0x1F, 0xE0,
 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0xF6, 0x1F, 0xF6, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0xC0, 0xF6, 0xFF, 0xF6, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x80, 0x03, 0xC0, 0x01, 0xE0, 0x07, 0x30, 0x1E, 0x10, 0x18, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0xFE, 0x1F, 0xFE, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0D, 0x00, 0x00, 0xF0, 0x1F, 0xF0, 0x1F, 0x60, 0x00, 0x30, 0x00, 0x30, 0x00, 0xF0, 0x1F, 0xE0, 0x1F, 0x60,
 0x00, 0x30, 0x00, 0x30, 0x00, 0xF0, 0x1F, 0xE0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xF0, 0x1F, 0xF0, 0x1F, 0x60, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0xF0, 0x1F, 0xE0,
 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xC0, 0x07, 0xE0, 0x0F, 0x70, 0x1C, 0x30, 0x18, 0x30, 0x18, 0x70, 0x1C, 0xE0, 0x0F, 0xC0,
 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xF0, 0xFF, 0xF0, 0xFF, 0x60, 0x0C, 0x30, 0x18, 0x30, 0x18, 0x70, 0x1C, 0xE0, 0x0F, 0xC0,
 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xC0, 0x07, 0xE0, 0x0F, 0x70, 0x1C, 0x30, 0x18, 0x30, 0x18, 0x60, 0x0C, 0xF0, 0xFF, 0xF0,
 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x00, 0x00, 0xF0, 0x1F, 0xF0, 0x1F, 0x60, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0xE0, 0x0C, 0xF0, 0x1D, 0xB0, 0x19, 0xB0, 0x1B, 0x30, 0x1B, 0x70, 0x1F, 0x60, 0x0E, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x05, 0x30, 0x00, 0xFC, 0x0F, 0xFE, 0x1F, 0x30, 0x18, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0xF0, 0x0F, 0xF0, 0x1F, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x0C, 0xF0, 0x1F, 0xF0,
 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0x70, 0x00, 0xF0, 0x03, 0x80, 0x1F, 0x00, 0x1C, 0x80, 0x1F, 0xF0, 0x03, 0x70, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0D, 0x30, 0x00, 0xF0, 0x03, 0xC0, 0x1F, 0x00, 0x1C, 0x80, 0x1F, 0xF0, 0x03, 0x70, 0x00, 0xF0, 0x03, 0x80,
 0x1F, 0x00, 0x1C, 0xC0, 0x1F, 0xF0, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0x30, 0x18, 0x70, 0x1C, 0xE0, 0x0F, 0x80, 0x03, 0xE0, 0x0F, 0x70, 0x1C, 0x30, 0x18, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x30, 0x00, 0xF0, 0xC0, 0xC0, 0xC7, 0x00, 0xFF, 0x00, 0x7C, 0x00, 0x1F, 0xC0, 0x07, 0xF0, 0x00, 0x30,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x08, 0x00, 0x00, 0x30, 0x18, 0x30, 0x1E, 0x30, 0x1F, 0xB0, 0x1B, 0xF0, 0x19, 0xF0, 0x18, 0x30, 0x18, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x80, 0x01, 0x80, 0x01, 0xFC, 0x7F, 0x7E, 0xFE, 0x06, 0xC0, 0x06, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x03, 0x00, 0x00, 0xFE, 0xFF, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x06, 0x06, 0xC0, 0x06, 0xC0, 0x7E, 0xFE, 0xFC, 0x7F, 0x80, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x09, 0x00, 0x00, 0x80, 0x01, 0xC0, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xC0,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x04, 0xF8, 0x0F, 0xF8, 0x0F, 0xF8, 0x0F, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/fonts/dynamis_logo.h"







const unsigned char DYNAMIS_LOGO[1024] = {
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 127, 127, 127, 191, 191, 191, 191, 191, 191, 191,
 191, 127, 127, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 63, 223, 239, 247, 123, 125, 238, 230, 231, 227, 195, 129, 129, 1, 1, 1, 1, 193, 195, 195,
 195, 199, 198, 206, 221, 251, 247, 239, 223, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 7, 248, 255, 7, 1, 0, 0, 0, 0, 0, 0, 1, 3, 31, 255, 254, 248, 0, 0, 1, 3, 15, 31, 63, 248, 240, 224,
 192, 0, 1, 7, 255, 248, 7, 255, 255, 0, 0, 252, 252, 252, 252, 252, 252, 252, 249, 1, 7, 255, 252, 248, 225,
 135, 15, 63, 63, 15, 135, 225, 248, 252, 255, 0, 0, 240, 195, 15, 63, 127, 255, 255, 255, 0, 0, 255, 255, 255,
 255, 63, 7, 129, 248, 248, 129, 15, 63, 255, 255, 255, 255, 0, 0, 240, 129, 15, 63, 255, 255, 255, 255, 63, 15,
 129, 240, 0, 0, 255, 255, 255, 0, 0, 255, 255, 248, 240, 224, 196, 140, 28, 60, 252, 252, 252, 252, 255, 255,
 255, 255, 248, 199, 63, 248, 192, 128, 128, 128, 128, 128, 192, 192, 224, 120, 63, 31, 7, 0, 0, 192, 240, 248,
 254, 255, 207, 195, 193, 192, 192, 192, 248, 63, 199, 248, 255, 255, 128, 128, 159, 159, 159, 159, 159, 159,
 159, 143, 192, 240, 255, 255, 255, 255, 255, 255, 128, 128, 255, 255, 255, 255, 255, 255, 128, 128, 255, 255,
 255, 254, 248, 225, 199, 143, 128, 128, 255, 191, 143, 129, 224, 242, 243, 243, 243, 243, 242, 224, 129, 143,
 191, 255, 128, 128, 255, 255, 254, 240, 193, 135, 135, 193, 240, 254, 255, 255, 128, 128, 255, 255, 255, 128,
 128, 255, 255, 143, 135, 131, 145, 152, 156, 158, 159, 159, 159, 159, 255, 255,
 255, 255, 255, 255, 255, 254, 253, 251, 247, 237, 217, 217, 177, 176, 160, 96, 96, 96, 96, 96, 96, 97, 97, 161,
 177, 177, 217, 217, 239, 247, 251, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
};
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_menu.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_dashboard.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../dd_graphic_controller.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../d_gears.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 29 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../d_gears.h"
unsigned char d_currentGear = 3;
unsigned char d_isNeutralSet =  0 ;
char dGear_error =  0 ;
char dGear_bypassShiftCheck =  0 ;
int d_gearMotorState =  4 ;

unsigned char dGear_getCurrentGearLetter(void);

void dGear_setNeutral(void);

void dGear_unsetNeutral(void);

void dGear_setError(void);

void dGear_unsetError(void);

void dGear_set(unsigned char gear);

unsigned char dGear_get(void);

void dGear_up(void);

void dGear_down(void);

char dGear_canGearUp(void);

char dGear_canGearDown(void);

char dGear_isShiftingCheckBypassed(void);

void dGear_enableShiftCheck(void);

void dGear_disableShiftCheck(void);

void d_setGearMotorState(int motorState);

unsigned char d_getGearMotorState(void);

char d_canSetGear(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../d_ebb.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../display/dd_dashboard.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../d_can.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/can.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/can.h"
#line 51 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/can.h"
void Can_init(void);

unsigned int Can_read(unsigned long int *id, char dataBuffer[], unsigned int *dataLength, unsigned int *inFlags);

void Can_writeByte(unsigned long int id, unsigned char dataOut);

void Can_writeInt(unsigned long int id, int dataOut);

void Can_addIntToWritePacket(int dataOut);

void Can_addByteToWritePacket(unsigned char dataOut);

void Can_write(unsigned long int id);

void Can_setWritePriority(unsigned int txPriority);

void Can_resetWritePacket(void);

unsigned int Can_getWriteFlags(void);

unsigned char Can_B0hasBeenReceived(void);

unsigned char Can_B1hasBeenReceived(void);

void Can_clearB0Flag(void);

void Can_clearB1Flag(void);

void Can_clearInterrupt(void);

void Can_initInterrupt(void);
#line 30 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/can.c"
unsigned char can_dataOutBuffer[ 8 ];
unsigned int can_dataOutLength = 0;
unsigned int can_txPriority =  _CAN_TX_PRIORITY_1 ;
unsigned int can_err = 0;
unsigned int can_rerrcnt = 0;
unsigned int can_terrcnt = 0;
unsigned int can_errcnt = 0;

void Can_init() {
 unsigned int Can_Init_flags = 0;
 Can_Init_flags = _CAN_CONFIG_STD_MSG &
 _CAN_CONFIG_DBL_BUFFER_OFF &
 _CAN_CONFIG_MATCH_MSG_TYPE &
 _CAN_CONFIG_LINE_FILTER_ON &
 _CAN_CONFIG_SAMPLE_THRICE &
 _CAN_CONFIG_PHSEG2_PRG_ON;
 CAN1Initialize(2, 4, 3, 4, 2, Can_Init_flags);
 CAN1SetOperationMode(_CAN_MODE_CONFIG, 0xFF);
#line 58 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/can.c"
 CAN1SetMask(_CAN_MASK_B1, 0, _CAN_CONFIG_MATCH_MSG_TYPE & _CAN_CONFIG_STD_MSG);
 CAN1SetFilter(_CAN_FILTER_B1_F1, 0, _CAN_CONFIG_STD_MSG);
 CAN1SetFilter(_CAN_FILTER_B1_F2, 0, _CAN_CONFIG_STD_MSG);

 CAN1SetMask(_CAN_MASK_B2, 0, _CAN_CONFIG_MATCH_MSG_TYPE & _CAN_CONFIG_STD_MSG);
 CAN1SetFilter(_CAN_FILTER_B2_F1, 0, _CAN_CONFIG_STD_MSG);


 CAN1SetOperationMode(_CAN_MODE_NORMAL, 0xFF);

 Can_initInterrupt();
 Can_setWritePriority( _CAN_TX_PRIORITY_1 );
}

unsigned int Can_read(unsigned long int *id, char dataBuffer[], unsigned int *dataLength, unsigned int *inFlags) {
 if (Can_B0hasBeenReceived()) {
 Can_clearB0Flag();
 return CAN1Read(id, dataBuffer, dataLength, inFlags);

 }
 else if (Can_B1hasBeenReceived()) {
 Can_clearB1Flag();
 return CAN1Read(id, dataBuffer, dataLength, inFlags);

 }
}

void Can_writeByte(unsigned long int id, unsigned char dataOut) {
 Can_resetWritePacket();
 Can_addByteToWritePacket(dataOut);
 Can_write(id);
}

void Can_writeInt(unsigned long int id, int dataOut) {
 Can_resetWritePacket();
 Can_addIntToWritePacket(dataOut);
 Can_write(id);
}

void Can_addIntToWritePacket(int dataOut) {
 Can_addByteToWritePacket((unsigned char) (dataOut >> 8));
 Can_addByteToWritePacket((unsigned char) (dataOut & 0xFF));
}

void Can_addByteToWritePacket(unsigned char dataOut) {
 can_dataOutBuffer[can_dataOutLength] = dataOut;
 can_dataOutLength += 1;
}

void Can_write(unsigned long int id) {
 unsigned int sent, i = 0, j = 0;
 do {

 sent = CAN1Write(id, can_dataOutBuffer,  8 , Can_getWriteFlags());
 i += 1;
 } while ((sent == 0) && (i <  50 ));
 if (i ==  50 ) {
 can_err++;
 }
}

void Can_setWritePriority(unsigned int txPriority) {
 can_txPriority = txPriority;
}

void Can_resetWritePacket(void) {
 for (can_dataOutLength = 0; can_dataOutLength <  8 ; can_dataOutLength += 1) {
 can_dataOutBuffer[can_dataOutLength] = 0;
 }
 can_dataOutLength = 0;
}

unsigned int Can_getWriteFlags(void) {
 return  _CAN_TX_STD_FRAME & _CAN_TX_NO_RTR_FRAME  & can_txPriority;
}

unsigned char Can_B0hasBeenReceived(void) {
 return  C1INTFBITS.RXB0IF  == 1;
}

unsigned char Can_B1hasBeenReceived(void) {
 return  C1INTFBITS.RXB1IF  == 1;
}

void Can_clearB0Flag(void) {
  C1INTFBITS.RXB0IF  = 0;
}

void Can_clearB1Flag(void) {
  C1INTFBITS.RXB1IF  = 0;
}

void Can_clearInterrupt(void) {
  IFS1BITS.C1IF  = 0;
}

void Can_initInterrupt(void) {
#line 161 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/can.c"
 IEC1BITS.C1IE = 1;
 C1INTEBITS.RXB0IE = 1;
 C1INTEBITS.RXB1IE = 1;

 }
#line 36 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../d_ebb.h"
void dEbb_init(void);

void dEbb_calibrateSwitch(void);

int dEbb_isCalibrateing(void);

void dEbb_calibrateUp(void);

void dEbb_calibrateDown(void);

void dEbb_calibratePause(void);

void dEbb_calibrateStop(void);

void dEbb_increase(void);

void dEbb_decrease(void);

void dEbb_setEbbValueFromCAN(unsigned int value);

void dEbb_setEbbMotorStateFromCAN(unsigned int motorState);

void dEbb_setEbbMotorSenseFromCAN(unsigned int motorSense);

void dEbb_propagateEbbChange(void);

void dEbb_propagateSteeringWheelChange(unsigned char action);

void dEbb_tick(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../d_hardreset.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/eeprom.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../display/dd_dashboard.h"
#line 18 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../d_hardreset.h"
void dHardReset_reset(void);

char dHardReset_hasBeenReset(void);

void dHardReset_setFlag(void);

void dHardReset_unsetFlag(void);

unsigned int dHardReset_getCounter(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../input-output/d_ledstripe.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../input-output/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../input-output/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../input-output/../../libs/dspic.h"
#line 77 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../input-output/d_ledstripe.h"
void dLedStripe_init(void);

void dLedStripe_debugByte(unsigned char debugByte);

void dLedStripe_clear(void);

void dLedStripe_setLedColorAtPosition(unsigned char color, unsigned char led);

void dLedStripe_setLedStripe(unsigned char colors[]);

void dLedStripe_switchLedColorAtPosition(unsigned char color, unsigned char led);

unsigned char dLedStripe_getLedColorAtPosition(unsigned char led);

void dLedStripe_setLedFromByteStripe(unsigned char *stripe, unsigned char led, unsigned char on);

void dLedStripe_updateFrame(void);

void dLedStripe_hardSetLedStripe(unsigned char stripe);

void dLedStripe_hardClearColors(void);

void dLedStripe_hardSetColor(unsigned char color);

void dLedStripe_hardSetLedPin(unsigned char led);

void dLedStripe_hardUnsetLedPin(unsigned char led);
#line 62 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_dashboard.h"
const unsigned char DEFAULT_INDICATORS[ 4 ] = { 1 ,  0 ,  2 ,  5 };
const unsigned char *PARAMETERS_DESCRIPTIONS[] = {
 "EBB", "TH2O", "V.BAT", "RPM",
 "CL", "P.OIL", "A.RIO", "EFION",
 "TRIM1", "TRIM2", "C.EFI", "MAP",
 "S.FAN", "T.AIR", "t.ACC", "C.FAN",
 "C.PH20", "C.FP", "BRK.F", "BRK.R",
 "RST", "EBB.S"
};

const unsigned char INDICATORS_LIST[] = {
  0 ,  1 ,  2 ,  3 ,
  4 ,  5 ,  6 ,  7 ,
  8 ,  9 ,  10 ,  11 ,
  12 ,  13 ,  14 ,  15 ,
  16 ,  17 ,  18 ,  19 ,
  20 ,  21 
};

const unsigned char GEAR_LETTER_X = (int) (( 128  / 2) - ( 40  / 2));
const unsigned char GEAR_LETTER_Y = SCREEN_Y_MIDDLE - (int) ( 59  / 2);

char dd_alertMessage[20];
unsigned int dd_alertTicks;

void dd_Dashboard_init(void);

void dd_Dashboard_fireTimedMessage(float time_seconds, char *text, unsigned char type);

void dd_Dashboard_fireMessage(char *text, unsigned char type);

void dd_Dashboard_clearAlerts(void);

char dd_Dashboard_isGearLetterChanged(void);

void dd_Dashboard_printGearLetter(void);

void dd_Dashboard_addIndicator(unsigned char id, char *description);

void dd_Dashboard_printIndicators(void);

unsigned char dd_Dashboard_getIndicatorIndex(unsigned char id);

unsigned char dd_Dashboard_getIndicatorIndexAtPosition(unsigned char position);

void dd_Dashboard_requestIndicatorPrintUpdate(unsigned char indicatorIndex);

void dd_Dashboard_requestIndicatorFullPrintUpdate(unsigned char indicatorIndex);

void dd_Dashboard_clearIndicatorPrintUpdateRequest(unsigned char indicatorIndex);

char dd_Dashboard_isPrintedIndicatorRequestingUpdate(unsigned char indicatorIndex);

char dd_Dashboard_isPrintedIndicatorRequestingFullUpdate(unsigned char indicatorIndex);

void dd_Dashboard_setAlertTimeout(float time);

void dd_Dashboard_startupLogo(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_indicators.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_dashboard.h"
#line 14 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_indicators.h"
const unsigned char INDICATOR_HEIGHT = (unsigned char) ( 64  / 2) - ( 1  * 2) - 1;
const unsigned char INDICATOR_WIDTH =
 (unsigned char) (( 128  -  40  -  1  * 4) / 2) - 1;
#line 38 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_indicators.h"
const unsigned char INDICATORS_POSITION_COORDINATES[ 22 ][2] = {
 { 0 ,  0 },
 { 128  - INDICATOR_WIDTH - 1  * 2 - 1 ,  0 },
 { 0 ,  64  - INDICATOR_HEIGHT - 1  * 2 - 1 },
 { 128  - INDICATOR_WIDTH - 1  * 2 - 1 ,  64  - INDICATOR_HEIGHT - 1  * 2 - 1 }};








const int BLINK_PERIOD_TICKS = (int) ( 0.5  / FRAME_PERIOD);

typedef struct Indicator {
 unsigned char id;
 char pendingPrintUpdate, isVisible, printPosition;
 unsigned char valueType, descriptionLength, valueWidth;
 char description[ 10 ];
 char stringValue[ 5 ];
 int intValue;
 float floatValue;
 char boolValue;
 char isFirstValue;
};

ydata struct Indicator dd_indicators[ 22 ];
unsigned char dd_Dashboard_indicatorsCount = 0;

void dd_Indicators_loadDefaults(void);

char dd_Indicators_isDefault(unsigned char indicator);
#line 76 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_indicators.h"
void dd_Indicator_setPrintPosition(unsigned char id, unsigned char position);

void dd_Indicator_setAsVisible(unsigned char indicatorIndex);

void dd_Indicator_hide(unsigned char indicatorIndex);

char dd_Indicator_isVisible(unsigned char indicatorIndex);

void dd_Indicator_setStringValue(unsigned char id, char *value);

void dd_Indicator_setIntValue(unsigned char id, int value);

void dd_Indicator_setFloatValue(unsigned char id, float value);

void dd_Indicator_setBoolValue(unsigned char id, char value);

void dd_Indicator_switchBoolValue(unsigned char id);

void dd_printIndicator(unsigned char indicatorIndex);

void dd_Indicator_drawContainers(unsigned char indicatorIndex);

void dd_Indicator_makeTextValue(unsigned char indicatorIndex);

unsigned char dd_Indicator_getDescriptionX(unsigned char indicatorIndex);

unsigned char dd_Indicator_getDescriptionY(unsigned char indicatorIndex);

unsigned char dd_Indicator_getValueX(unsigned char indicatorIndex);

unsigned char dd_Indicator_getValueY(unsigned char indicatorIndex);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_interfaces.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/../dd_graphic_controller.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_dashboard.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_menu.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_indicators.h"
#line 20 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/../display/dd_interfaces.h"
void dd_Interface_printMessage(char *title);

void dd_Interface_printDashboard(void);

void dd_Interface_printSettings(void);

void dd_Interface_onSettingsChange(char direction);

void dd_Interface_applySettings(void);

void dd_Interface_printDebug(void);

void dd_Interface_printParameterPage(unsigned char parameter);

void dd_Interface_drawTitle(char *title);

void dd_Interface_drawTitleContainers(void);

unsigned char dd_Interface_getTitleX(char *title);

unsigned char dd_Interface_getTitleY(void);

unsigned char dd_Interface_getParameterValueX(unsigned char indicatorIndex);

unsigned char dd_Interface_getParameterValueY(void);
#line 27 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_menu.h"
char *STRING_TRUE = "Yes";
char *STRING_FALSE = "No";


const unsigned char MAX_MENU_HEIGHT = (unsigned char) ( 64  /  8 );
const unsigned char MAX_MENU_WIDTH = (int) ( 128  / ( 6  +  1 ));

typedef struct MenuLine {
 unsigned char id, valueType, descriptionLength, valueWidth;
 char description[ 16 ];
 char stringValue[ 6 ];
 int intValue;
 float floatValue;
 char boolValue;
 char pendingPrintUpdate, isFirstValue;
 int descriptionScrollingOffset;
};

ydata struct MenuLine dd_menuLines[25];
unsigned char dd_Menu_LinesCount = 0;

unsigned char dd_Menu_SelectedLine = 0, dd_Menu_FirstLineIndex = 0;
unsigned char dd_Menu_Height_param = MAX_MENU_HEIGHT;
unsigned char dd_Menu_Width = MAX_MENU_WIDTH;
unsigned char dd_Menu_X_OFFSET = 0;
unsigned char dd_Menu_Y_OFFSET = 0;

int dd_Menu_DescriptionScrollingTicks = 0;

void dd_Menu_setY_OFFSET(unsigned char y);

void dd_Menu_setX_OFFSET(unsigned char x);

void dd_Menu_setHeight(unsigned char height);

void dd_Menu_setWidth(unsigned char width);

void dd_Menu_selectDown(void);

void dd_Menu_selectUp(void);

void dd_Menu_scrollDown(void);

void dd_Menu_scrollUp(void);

void dd_Menu_reset(void);

void dd_Menu_addLine(unsigned char id, char *description);

void dd_MenuLine_setStringValue(unsigned char id, char *value);

void dd_MenuLine_setIntValue(unsigned char id, int value);

void dd_MenuLine_setFloatValue(unsigned char id, float value);

void dd_MenuLine_setBoolValue(unsigned char id, char value);

void dd_MenuLine_switchBoolValue(unsigned char id);

unsigned char dd_Menu_getLineIndex(unsigned char id);

void dd_printMenu(void);

void dd_printMenuLine(unsigned char lineIndex);

void dd_Menu_makeLineText(char *lineText, unsigned char lineIndex);

void dd_MenuLine_makeTextValue(unsigned char lineIndex);

int dd_MenuLine_getScrollOffset(unsigned char lineIndex);

int dd_MenuLine_getScrollingOverflow(unsigned char lineIndex);

char dd_MenuLine_hasToScroll(unsigned char lineIndex);

char dd_MenuLine_isScrollingThisFrame(unsigned char lineIndex);

unsigned char dd_MenuLine_getDescriptionWidth(unsigned char lineIndex);

unsigned char dd_MenuLine_getValueWidth(unsigned char lineIndex);

void dd_Menu_clearLinePrintUpdateRequest(unsigned char lineIndex);

void dd_Menu_requestLinePrintUpdate(unsigned char lineIndex);

char dd_Menu_isPrintedLineRequestingUpdate(unsigned char lineIndex);

char dd_Menu_isLineSelected(unsigned char lineIndex);

char dd_Menu_isLineVisible(unsigned char lineIndex);

void dd_Menu_resetDescriptionScrolling(void);
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for dspic/include/string.h"
#line 9 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_menu.c"
void dd_Menu_setY_OFFSET(unsigned char y) {
 dd_Menu_Y_OFFSET = y;
}

void dd_Menu_setX_OFFSET(unsigned char x) {
 dd_Menu_X_OFFSET = x;
}

void dd_Menu_setHeight(unsigned char height) {
 if (height > MAX_MENU_HEIGHT) {
 height = MAX_MENU_HEIGHT;
 }
 dd_Menu_Height_param = height;
}

void dd_Menu_setWidth(unsigned char width) {
 if (width > MAX_MENU_WIDTH) {
 width = MAX_MENU_WIDTH;
 }
 dd_Menu_Width = width;
}

void dd_Menu_reset(void) {
 dd_Menu_SelectedLine = 0;
 dd_Menu_LinesCount = 0;
 dd_Menu_FirstLineIndex = 0;
}

void dd_Menu_addLine(unsigned char id, char *description) {
 dd_menuLines[dd_Menu_LinesCount].id = id;
 strcpy(dd_menuLines[dd_Menu_LinesCount].description, description);
 dd_menuLines[dd_Menu_LinesCount].descriptionLength = (unsigned char) strlen(description);
 dd_menuLines[dd_Menu_LinesCount].valueType =  4 ;
 dd_menuLines[dd_Menu_LinesCount].pendingPrintUpdate =  1 ;
 dd_menuLines[dd_Menu_LinesCount].descriptionScrollingOffset = 0;
 dd_menuLines[dd_Menu_LinesCount].valueWidth = 0;
 dd_menuLines[dd_Menu_LinesCount].isFirstValue =  1 ;
 dd_Menu_LinesCount += 1;
}

void dd_Menu_selectDown(void) {
 if (dd_Menu_SelectedLine < dd_Menu_LinesCount - 1) {
 dd_Menu_requestLinePrintUpdate(dd_Menu_SelectedLine);
 dd_Menu_SelectedLine += 1;
 dd_Menu_requestLinePrintUpdate(dd_Menu_SelectedLine);
 dd_Menu_resetDescriptionScrolling();
 }
 if (dd_Menu_SelectedLine == dd_Menu_FirstLineIndex +  (dd_Menu_Height_param + dd_Menu_Y_OFFSET)  - dd_Menu_Y_OFFSET) {
 dd_Menu_scrollDown();
 }
}

void dd_Menu_selectUp(void) {
 if (dd_Menu_SelectedLine > 0) {
 dd_Menu_requestLinePrintUpdate(dd_Menu_SelectedLine);
 dd_Menu_SelectedLine -= 1;
 dd_Menu_requestLinePrintUpdate(dd_Menu_SelectedLine);
 dd_Menu_resetDescriptionScrolling();
 }
 if (dd_Menu_SelectedLine < dd_Menu_FirstLineIndex) {
 dd_Menu_scrollUp();
 }
}

void dd_Menu_scrollDown(void) {
 unsigned char i;
 if (dd_Menu_FirstLineIndex +  (dd_Menu_Height_param + dd_Menu_Y_OFFSET)  - dd_Menu_Y_OFFSET < dd_Menu_LinesCount) {
 dd_Menu_FirstLineIndex += 1;
 for (i = dd_Menu_FirstLineIndex; i < dd_Menu_FirstLineIndex +  (dd_Menu_Height_param + dd_Menu_Y_OFFSET) ; i += 1) {
 dd_Menu_requestLinePrintUpdate(i);
 }
 }
}

void dd_Menu_scrollUp(void) {
 unsigned char i;
 if (dd_Menu_FirstLineIndex > 0) {
 dd_Menu_FirstLineIndex -= 1;
 for (i = dd_Menu_FirstLineIndex; i < dd_Menu_FirstLineIndex +  (dd_Menu_Height_param + dd_Menu_Y_OFFSET) ; i += 1) {
 dd_Menu_requestLinePrintUpdate(i);
 }
 }
}

void dd_MenuLine_setStringValue(unsigned char id, char *value) {
 unsigned char lineIndex = dd_Menu_getLineIndex(id);
 strcpy(dd_menuLines[lineIndex].stringValue, value);
 dd_Menu_requestLinePrintUpdate(lineIndex);
 dd_menuLines[lineIndex].valueType =  0 ;
 dd_menuLines[lineIndex].isFirstValue =  0 ;
}

void dd_MenuLine_setIntValue(unsigned char id, int value) {
 unsigned char lineIndex = dd_Menu_getLineIndex(id);
 if (dd_menuLines[lineIndex].intValue != value
 || dd_menuLines[lineIndex].isFirstValue
 || dd_menuLines[lineIndex].valueType !=  1 ) {
 dd_menuLines[lineIndex].intValue = value;
 dd_menuLines[lineIndex].valueType =  1 ;
 dd_menuLines[lineIndex].isFirstValue =  0 ;
 dd_Menu_requestLinePrintUpdate(lineIndex);
 }
}

void dd_MenuLine_setFloatValue(unsigned char id, float value) {
 unsigned char lineIndex = dd_Menu_getLineIndex(id);
 if (dd_menuLines[lineIndex].floatValue != value
 || dd_menuLines[lineIndex].isFirstValue
 || dd_menuLines[lineIndex].valueType !=  2 ) {
 dd_menuLines[lineIndex].floatValue = value;
 dd_menuLines[lineIndex].valueType =  2 ;
 dd_menuLines[lineIndex].isFirstValue =  0 ;
 dd_Menu_requestLinePrintUpdate(lineIndex);
 }
}

void dd_MenuLine_setBoolValue(unsigned char id, char value) {
 unsigned char lineIndex = dd_Menu_getLineIndex(id);
 if (dd_menuLines[lineIndex].boolValue != value
 || dd_menuLines[lineIndex].isFirstValue
 || dd_menuLines[lineIndex].valueType !=  3 ) {
 dd_menuLines[lineIndex].boolValue = value;
 dd_menuLines[lineIndex].valueType =  3 ;
 dd_menuLines[lineIndex].isFirstValue =  0 ;
 dd_Menu_requestLinePrintUpdate(lineIndex);
 }
}

void dd_MenuLine_switchBoolValue(unsigned char id) {
 unsigned char lineIndex = dd_Menu_getLineIndex(id);
 dd_menuLines[lineIndex].boolValue = !dd_menuLines[lineIndex].boolValue;
 dd_menuLines[lineIndex].valueType =  3 ;
 dd_menuLines[lineIndex].isFirstValue =  0 ;
 dd_Menu_requestLinePrintUpdate(lineIndex);
}

unsigned char dd_Menu_getLineIndex(unsigned char id) {
 unsigned char i;
 for (i = 0; i < sizeof(dd_menuLines); i += 1) {
 if (dd_menuLines[i].id == id) {
 return i;
 }
 }
 return i;
}

void dd_printMenu(void) {
 unsigned char i;
 dd_Menu_DescriptionScrollingTicks += 1;
 for (i = 0; i < dd_Menu_LinesCount; i += 1) {
 if (dd_Menu_isPrintedLineRequestingUpdate(i) || dd_GraphicController_isFrameUpdateForced()) {
 dd_printMenuLine(i);
 }
 }
}

void dd_printMenuLine(unsigned char lineIndex) {
 unsigned char lineNumber, color;
 char lineText[MAX_MENU_WIDTH + 1];
 if (dd_Menu_isLineVisible(lineIndex)) {
 lineNumber = lineIndex - dd_Menu_FirstLineIndex + dd_Menu_Y_OFFSET;
 if (dd_Menu_isLineSelected(lineIndex)) {
 color = WHITE;
 } else {
 color = BLACK;
 }
 dd_Menu_makeLineText(lineText, lineIndex);
  Glcd_Set_Font( DynamisFont_Terminal6x8, 6 , 8 , 32 ); Glcd_Write_Text(lineText, 0, lineNumber, color); ;
#line 178 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_menu.c"
 dd_Menu_clearLinePrintUpdateRequest(lineIndex);
 }
}

void dd_Menu_makeLineText(char *lineText, unsigned char lineIndex) {
 int lineCharIndex, i, scrollingOffset, scrollingOverflow;
 unsigned char descriptionLength, valueWidth;
 dd_MenuLine_makeTextValue(lineIndex);
 valueWidth = dd_MenuLine_getValueWidth(lineIndex);
 scrollingOverflow = dd_MenuLine_getScrollingOverflow(lineIndex);
 scrollingOffset = dd_MenuLine_getScrollOffset(lineIndex);
 descriptionLength = dd_menuLines[lineIndex].descriptionLength;
 for (lineCharIndex = 0; lineCharIndex < dd_MenuLine_getDescriptionWidth(lineIndex); lineCharIndex += 1) {
 i = lineCharIndex + scrollingOffset;
 if (i < descriptionLength) {
 lineText[lineCharIndex] = dd_menuLines[lineIndex].description[i];
 } else if (i < scrollingOverflow || !dd_MenuLine_hasToScroll(lineIndex)) {
 lineText[lineCharIndex] = ' ';
 } else {
 lineText[lineCharIndex] = dd_menuLines[lineIndex].description[i - scrollingOverflow];
 }
 }
 if (valueWidth > 0) {
 for (i = 0; i <  1 ; i += 1) {
 lineText[lineCharIndex] = ' ';
 lineCharIndex += 1;
 }
 for (i = 0; i < valueWidth; i += 1) {
 lineText[lineCharIndex] = dd_menuLines[lineIndex].stringValue[i];
 lineCharIndex += 1;
 }
 }
 lineText[lineCharIndex] = ' ';
 dd_menuLines[lineIndex].descriptionScrollingOffset = scrollingOffset;
}

void dd_MenuLine_makeTextValue(unsigned char lineIndex) {
 unsigned char valueType = dd_menuLines[lineIndex].valueType;
 if (valueType !=  0 ) {
 emptyString(dd_menuLines[lineIndex].stringValue);
 switch (valueType) {
 case  1 :
 sprintf(dd_menuLines[lineIndex].stringValue, "%i", dd_menuLines[lineIndex].intValue);
 break;
 case  2 :
 sprintf(dd_menuLines[lineIndex].stringValue, "%.2f", dd_menuLines[lineIndex].floatValue);
 break;
 case  3 :
 if (dd_menuLines[lineIndex].boolValue) {
 strcpy(dd_menuLines[lineIndex].stringValue, STRING_TRUE);
 } else {
 strcpy(dd_menuLines[lineIndex].stringValue, STRING_FALSE);
 }
 break;
 case  4 :
 default:
 break;
 }
 }
 dd_menuLines[lineIndex].valueWidth = (unsigned char) strlen(dd_menuLines[lineIndex].stringValue);
}

int dd_MenuLine_getScrollOffset(unsigned char lineIndex) {
 int offset;
 if (dd_MenuLine_hasToScroll(lineIndex)) {
 offset = (int) (FRAME_PERIOD * dd_Menu_DescriptionScrollingTicks *  3.5 );
 if (offset >= dd_MenuLine_getScrollingOverflow(lineIndex)) {
 offset = 0;
 dd_Menu_resetDescriptionScrolling();
 }
 return offset;
 } else {
 return 0;
 }
}

int dd_MenuLine_getScrollingOverflow(unsigned char lineIndex) {
 return dd_menuLines[lineIndex].descriptionLength +  4 ;
}

char dd_MenuLine_hasToScroll(unsigned char lineIndex) {
 return dd_Menu_isLineSelected(lineIndex) &&
 dd_menuLines[lineIndex].descriptionLength > dd_MenuLine_getDescriptionWidth(lineIndex);
}

char dd_MenuLine_isScrollingThisFrame(unsigned char lineIndex) {
 return dd_MenuLine_hasToScroll(lineIndex) &&
 (dd_menuLines[lineIndex].descriptionScrollingOffset != dd_MenuLine_getScrollOffset(lineIndex));
}

unsigned char dd_MenuLine_getDescriptionWidth(unsigned char lineIndex) {
 unsigned char valueWidth;
 valueWidth = dd_MenuLine_getValueWidth(lineIndex);
 if (valueWidth > 0) {
 return (unsigned char) (dd_Menu_Width - valueWidth -  1 );
 } else {
 return dd_Menu_Width;
 }
}

unsigned char dd_MenuLine_getValueWidth(unsigned char lineIndex) {
 return dd_menuLines[lineIndex].valueWidth;
}

void dd_Menu_clearLinePrintUpdateRequest(unsigned char lineIndex) {
 dd_menuLines[lineIndex].pendingPrintUpdate =  0 ;
}

void dd_Menu_requestLinePrintUpdate(unsigned char lineIndex) {
 dd_menuLines[lineIndex].pendingPrintUpdate =  1 ;
}

char dd_Menu_isPrintedLineRequestingUpdate(unsigned char lineIndex) {
 return dd_menuLines[lineIndex].pendingPrintUpdate || dd_MenuLine_isScrollingThisFrame(lineIndex);
}

char dd_Menu_isLineSelected(unsigned char lineIndex) {
 return dd_Menu_SelectedLine == lineIndex;
}

char dd_Menu_isLineVisible(unsigned char lineIndex) {
 return lineIndex >= dd_Menu_FirstLineIndex &&
 lineIndex < dd_Menu_FirstLineIndex + ( (dd_Menu_Height_param + dd_Menu_Y_OFFSET)  - dd_Menu_Y_OFFSET);
}

void dd_Menu_resetDescriptionScrolling(void) {
 dd_Menu_DescriptionScrollingTicks = 0;
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_indicators.c"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for dspic/include/string.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_indicators.h"
#line 8 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_indicators.c"
void dd_Indicators_loadDefaults(void) {
 unsigned int i;
 for (i = 0; i <  22 ; i += 1) {
 dd_Dashboard_addIndicator(INDICATORS_LIST[i], PARAMETERS_DESCRIPTIONS[INDICATORS_LIST[i]]);
 dd_Indicator_setStringValue(INDICATORS_LIST[i], "?");
 }
 for (i = 0; i <  4 ; i += 1) {
 dd_Indicator_setPrintPosition(DEFAULT_INDICATORS[i], i);
 }
}

char dd_Indicators_isDefault(unsigned char indicator) {
 unsigned char i;
 for (i = 0; i < sizeof(DEFAULT_INDICATORS); i += 1) {
 if (indicator == DEFAULT_INDICATORS[i]) {
 return  1 ;
 }
 }
 return  0 ;
}

void dd_Indicator_setPrintPosition(unsigned char id, unsigned char position) {
 unsigned char i;
 for (i = 0; i < dd_Dashboard_indicatorsCount; i += 1) {
 if (dd_indicators[i].id == id) {
 dd_Indicator_setAsVisible(i);
 dd_Dashboard_requestIndicatorFullPrintUpdate(i);
 dd_indicators[i].printPosition = position;
 } else if (dd_indicators[i].printPosition == position) {
 dd_Indicator_hide(i);
 dd_Dashboard_requestIndicatorFullPrintUpdate(i);
 }
 }
}

void dd_Indicator_setStringValue(unsigned char id, char *value) {
 unsigned char indicatorIndex = dd_Dashboard_getIndicatorIndex(id);
 strcpy(dd_indicators[indicatorIndex].stringValue, value);
 dd_Dashboard_requestIndicatorPrintUpdate(indicatorIndex);
 dd_indicators[indicatorIndex].valueType =  0 ;
 dd_indicators[indicatorIndex].isFirstValue =  0 ;
}

void dd_Indicator_setIntValue(unsigned char id, int value) {
 unsigned char indicatorIndex = dd_Dashboard_getIndicatorIndex(id);
 if (dd_indicators[indicatorIndex].intValue != value
 || dd_indicators[indicatorIndex].isFirstValue
 || dd_indicators[indicatorIndex].valueType !=  1 ) {
 dd_indicators[indicatorIndex].intValue = value;
 dd_indicators[indicatorIndex].valueType =  1 ;
 dd_indicators[indicatorIndex].isFirstValue =  0 ;
 dd_Dashboard_requestIndicatorPrintUpdate(indicatorIndex);
 }
}

void dd_Indicator_setFloatValue(unsigned char id, float value) {
 unsigned char indicatorIndex = dd_Dashboard_getIndicatorIndex(id);
 if (dd_indicators[indicatorIndex].floatValue != value
 || dd_indicators[indicatorIndex].isFirstValue
 || dd_indicators[indicatorIndex].valueType !=  2 ) {
 dd_indicators[indicatorIndex].floatValue = value;
 dd_indicators[indicatorIndex].valueType =  2 ;
 dd_indicators[indicatorIndex].isFirstValue =  0 ;
 dd_Dashboard_requestIndicatorPrintUpdate(indicatorIndex);
 }
}

void dd_Indicator_setBoolValue(unsigned char id, char value) {
 unsigned char indicatorIndex = dd_Dashboard_getIndicatorIndex(id);
 if (dd_indicators[indicatorIndex].boolValue != value
 || dd_indicators[indicatorIndex].isFirstValue
 || dd_indicators[indicatorIndex].valueType !=  3 ) {
 dd_indicators[indicatorIndex].boolValue = value;
 dd_indicators[indicatorIndex].valueType =  3 ;
 dd_indicators[indicatorIndex].isFirstValue =  0 ;
 dd_Dashboard_requestIndicatorPrintUpdate(indicatorIndex);
 }
}

void dd_Indicator_switchBoolValue(unsigned char id) {
 unsigned char indicatorIndex = dd_Dashboard_getIndicatorIndex(id);
 dd_indicators[indicatorIndex].boolValue = !dd_indicators[indicatorIndex].boolValue;
 dd_indicators[indicatorIndex].valueType =  3 ;
 dd_indicators[indicatorIndex].isFirstValue =  0 ;
 dd_Dashboard_requestIndicatorPrintUpdate(indicatorIndex);
}

void dd_Indicator_setAsVisible(unsigned char indicatorIndex) {
 dd_indicators[indicatorIndex].isVisible =  1 ;
}

void dd_Indicator_hide(unsigned char indicatorIndex) {
 dd_indicators[indicatorIndex].isVisible =  0 ;
}

char dd_Indicator_isVisible(unsigned char indicatorIndex) {
 return dd_indicators[indicatorIndex].isVisible;
}

void dd_printIndicator(unsigned char indicatorIndex) {
 unsigned char x, y, oldValueWidth;
 oldValueWidth = dd_indicators[indicatorIndex].valueWidth;

  xGlcd_Set_Font ( DynamisFont_Dashboard16x16, 16 , 16 , 32 );

 x = dd_Indicator_getValueX(indicatorIndex);
 y = dd_Indicator_getValueY(indicatorIndex);

 eGlcd_clearText(dd_indicators[indicatorIndex].stringValue, x, y);

 dd_Indicator_makeTextValue(indicatorIndex);
 if (oldValueWidth != dd_indicators[indicatorIndex].valueWidth) {

 x = dd_Indicator_getValueX(indicatorIndex);
 }
 eGlcd_writeText(dd_indicators[indicatorIndex].stringValue, x, y);

 if (dd_GraphicController_isFrameUpdateForced() ||
 dd_Dashboard_isPrintedIndicatorRequestingFullUpdate(indicatorIndex)) {
 dd_Indicator_drawContainers(indicatorIndex);
 x = dd_Indicator_getDescriptionX(indicatorIndex);
 y = dd_Indicator_getDescriptionY(indicatorIndex);
  xGlcd_Set_Font ( DynamisFont_xTerminal6x8, 6 , 8 , 32 );
 eGlcd_overwriteText(dd_indicators[indicatorIndex].description, dd_indicators[indicatorIndex].description, x, y);
 }

 dd_Dashboard_clearIndicatorPrintUpdateRequest(indicatorIndex);
}

void dd_Indicator_drawContainers(unsigned char indicatorIndex) {
 unsigned char x, y;
 x = INDICATORS_POSITION_COORDINATES[dd_indicators[indicatorIndex].printPosition][ 0 ];
 y = INDICATORS_POSITION_COORDINATES[dd_indicators[indicatorIndex].printPosition][ 1 ];
  Glcd_Rectangle_Round_Edges( x + 1 , y + 1 , x + 1  + INDICATOR_WIDTH, y + 1  + INDICATOR_HEIGHT, 3 , BLACK ); ;
#line 149 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_indicators.c"
}

unsigned char dd_Indicator_getDescriptionX(unsigned char indicatorIndex) {
 return (unsigned char) (INDICATORS_POSITION_COORDINATES[dd_indicators[indicatorIndex].printPosition][ 0 ] +
 INDICATOR_WIDTH / 2 -
 (dd_indicators[indicatorIndex].descriptionLength *  6 ) / 2);
}

unsigned char dd_Indicator_getDescriptionY(unsigned char indicatorIndex) {
 return (unsigned char) (INDICATORS_POSITION_COORDINATES[dd_indicators[indicatorIndex].printPosition][ 1 ] +
  3 );
}

unsigned char dd_Indicator_getValueX(unsigned char indicatorIndex) {
 return (unsigned char) (
 (INDICATORS_POSITION_COORDINATES[dd_indicators[indicatorIndex].printPosition][ 0 ] + INDICATOR_WIDTH / 2) -
 (dd_indicators[indicatorIndex].valueWidth *  6 ) / 2);
}

unsigned char dd_Indicator_getValueY(unsigned char indicatorIndex) {
 return (unsigned char) (INDICATORS_POSITION_COORDINATES[dd_indicators[indicatorIndex].printPosition][ 1 ] +
 ((INDICATOR_HEIGHT - ( 3  +  8 )) / 2) +
 ( 3  +  8 ) - ( 16  / 2) +
  1 );
}

void dd_Indicator_makeTextValue(unsigned char indicatorIndex) {
 unsigned char valueType = dd_indicators[indicatorIndex].valueType;
 if (valueType !=  0 ) {
 emptyString(dd_indicators[indicatorIndex].stringValue);
 switch (valueType) {
 case  1 :
 sprintf(dd_indicators[indicatorIndex].stringValue, "%i", dd_indicators[indicatorIndex].intValue);
 break;
 case  2 :
 sprintf(dd_indicators[indicatorIndex].stringValue, "%.1f", dd_indicators[indicatorIndex].floatValue);
 break;
 case  3 :
 if (dd_indicators[indicatorIndex].boolValue) {
 strcpy(dd_indicators[indicatorIndex].stringValue, STRING_TRUE);
 } else {
 strcpy(dd_indicators[indicatorIndex].stringValue, STRING_FALSE);
 }
 break;
 case  4 :
 default:
 break;
 }
 }
 dd_indicators[indicatorIndex].valueWidth = (unsigned char) strlen(dd_indicators[indicatorIndex].stringValue);
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_dashboard.c"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for dspic/include/string.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_dashboard.h"
#line 9 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_dashboard.c"
char dd_lastPrintedGearLetter =  54 ;

void dd_Dashboard_init(void) {
 dGear_set((unsigned char)0);
 dGear_setNeutral();
 dd_Indicators_loadDefaults();
 if (!dHardReset_hasBeenReset()) {
 dd_Dashboard_startupLogo();
 }
}

void dd_Dashboard_fireTimedMessage(float time_seconds, char *text, unsigned char type) {
 dd_Dashboard_setAlertTimeout(time_seconds);
 dd_Dashboard_fireMessage(text, type);
}

void dd_Dashboard_fireMessage(char *text, unsigned char type) {
 strcpy(dd_alertMessage, text);
 switch (type) {
 case  0 :
 dd_GraphicController_setInterface( 4 );
 break;
 case  1 :
 dd_GraphicController_setInterface( 5 );
 break;
 case  2 :
 dd_GraphicController_setInterface( 3 );
 break;
 default:
 dd_GraphicController_setInterface( 4 );
 break;
 }
}

void dd_Dashboard_clearAlerts(void) {
 if (dd_GraphicController_getInterface() ==  3 
 || dd_GraphicController_getInterface() ==  4 
 || dd_GraphicController_getInterface() ==  5 ) {
 dd_GraphicController_switchLastInterface();
 }
}


char dd_Dashboard_isGearLetterChanged(void) {
 return dd_lastPrintedGearLetter != dGear_getCurrentGearLetter();
}

void dd_Dashboard_printGearLetter(void) {
 unsigned char newLetter = dGear_getCurrentGearLetter();
 if (dd_Dashboard_isGearLetterChanged() || dd_GraphicController_isFrameUpdateForced()) {
  xGlcd_Set_Font ( DynamisFont_Gears40x59, 40 , 59 , 48 );
 eGlcd_overwriteChar(dd_lastPrintedGearLetter, newLetter, GEAR_LETTER_X, GEAR_LETTER_Y);
 dd_lastPrintedGearLetter = newLetter;
 }
}

void dd_Dashboard_addIndicator(unsigned char id, char *description) {
 dd_indicators[dd_Dashboard_indicatorsCount].id = id;
 strcpy(dd_indicators[dd_Dashboard_indicatorsCount].description, description);
 dd_indicators[dd_Dashboard_indicatorsCount].descriptionLength = (unsigned char) strlen(description);
 dd_indicators[dd_Dashboard_indicatorsCount].valueType =  4 ;
 dd_indicators[dd_Dashboard_indicatorsCount].pendingPrintUpdate =  1 ;
 dd_indicators[dd_Dashboard_indicatorsCount].isFirstValue =  1 ;
 dd_indicators[dd_Dashboard_indicatorsCount].isVisible =  0 ;
 dd_indicators[dd_Dashboard_indicatorsCount].printPosition = 0;
 dd_Dashboard_indicatorsCount += 1;
}

void dd_Dashboard_requestIndicatorPrintUpdate(unsigned char indicatorIndex) {

 if (dd_indicators[indicatorIndex].pendingPrintUpdate !=  2 ) {
 dd_indicators[indicatorIndex].pendingPrintUpdate =  1 ;
 }
}

void dd_Dashboard_requestIndicatorFullPrintUpdate(unsigned char indicatorIndex) {
 dd_indicators[indicatorIndex].pendingPrintUpdate =  2 ;
}

void dd_Dashboard_clearIndicatorPrintUpdateRequest(unsigned char indicatorIndex) {
 dd_indicators[indicatorIndex].pendingPrintUpdate =  0 ;
}

char dd_Dashboard_isPrintedIndicatorRequestingUpdate(unsigned char indicatorIndex) {
 return dd_indicators[indicatorIndex].pendingPrintUpdate ==  1  ||
 dd_indicators[indicatorIndex].pendingPrintUpdate ==  2 ;
}

char dd_Dashboard_isPrintedIndicatorRequestingFullUpdate(unsigned char indicatorIndex) {
 return dd_indicators[indicatorIndex].pendingPrintUpdate ==  2 ;
}

void dd_Dashboard_printIndicators(void) {
 unsigned char index, printOrder;
 for (printOrder = 0; printOrder <  4 ; printOrder += 1) {
 index = dd_Dashboard_getIndicatorIndexAtPosition(printOrder);
 if (dd_Dashboard_isPrintedIndicatorRequestingUpdate(index) ||
 dd_GraphicController_isFrameUpdateForced()) {
 dd_printIndicator(index);
 }
 }
}

unsigned char dd_Dashboard_getIndicatorIndex(unsigned char id) {
 unsigned char i;
 for (i = 0; i < sizeof(dd_indicators); i += 1) {
 if (dd_indicators[i].id == id) {
 return i;
 }
 }
 return i;
}

unsigned char dd_Dashboard_getIndicatorIndexAtPosition(unsigned char position) {
 unsigned char index;
 for (index = 0; index < dd_Dashboard_indicatorsCount; index += 1) {
 if (dd_Indicator_isVisible(index) && dd_indicators[index].printPosition == position) {
 return index;
 }
 }
 return 0;
}

void dd_Dashboard_setAlertTimeout(float time) {
 dd_alertTicks = (unsigned int) ((time / FRAME_PERIOD) + 0.5);
}

void dd_Dashboard_startupLogo(void) {
 const unsigned char step1[ 6 ] = { 0b00000010 ,  0b00000000 ,  0b00000000 ,  0b00000000 ,  0b00000000 ,  0b00000001 };
 const unsigned char step2[ 6 ] = { 0b00000010 ,  0b00000010 ,  0b00000000 ,  0b00000000 ,  0b00000001 ,  0b00000001 };
 const unsigned char step3[ 6 ] = { 0b00000010 ,  0b00000010 ,  0b00000111 ,  0b00000111 ,  0b00000001 ,  0b00000001 };
  Glcd_Image(DYNAMIS_LOGO) ;
 dLedStripe_clear();
 Delay_ms( 1000  /  6  / 2);
 dLedStripe_setLedStripe(step1);
 Delay_ms( 1000  /  6  / 2);
 dLedStripe_setLedStripe(step2);
 Delay_ms( 1000  /  6  / 2);
 dLedStripe_setLedStripe(step3);
 Delay_ms( 1000  /  6  / 2);
 Delay_ms( 1000  /  6  / 2);
 dLedStripe_setLedStripe(step2);
 Delay_ms( 1000  /  6  / 2);
 dLedStripe_setLedStripe(step1);
 Delay_ms( 1000  /  6  / 2);
 dLedStripe_clear();
 Delay_ms( 1000  / 2);
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_interfaces.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_interfaces.h"
#line 10 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_interfaces.c"
void dd_Interface_printMessage(char *title) {
 unsigned char x, y;
 if (dd_GraphicController_isFrameUpdateForced()) {
 eGlcd_invertColors();
 eGlcd_clear();
 dd_Interface_drawTitle(title);
  xGlcd_Set_Font ( DynamisFont_Dashboard16x16, 16 , 16 , 32 );
 x = dd_Interface_getTitleX(dd_alertMessage);
 y = SCREEN_Y_MIDDLE;
 eGlcd_writeText(dd_alertMessage, x, y);
 eGlcd_invertColors();
 }
}

void dd_Interface_printDashboard(void) {
 dd_Dashboard_printGearLetter();
 dd_Dashboard_printIndicators();
}

void dd_Interface_printSettings(void) {
 if (dd_GraphicController_isFrameUpdateForced()) {
 dd_Menu_reset();
 dd_Menu_setY_OFFSET(3);
 dd_Menu_setHeight(5);
 dd_Menu_addLine( 0 , "D. Top L");
 dd_Menu_addLine( 1 , "D. Top R");
 dd_Menu_addLine( 2 , "D. Bottom L");
 dd_Menu_addLine( 3 , "D. Bottom R");
 dd_Menu_addLine( 4 , "Invert colors");
 dd_Menu_addLine( 5 , "Bypass gear shift");

  dd_menuLines[ 0 ].intValue  = dd_Dashboard_getIndicatorIndexAtPosition( 0 );
  dd_menuLines[ 0 ].boolValue  =  0 ;
 dd_MenuLine_setStringValue( 0 ,
 dd_indicators[dd_Dashboard_getIndicatorIndexAtPosition( 0 )].description);

  dd_menuLines[ 1 ].intValue  = dd_Dashboard_getIndicatorIndexAtPosition( 1 );
  dd_menuLines[ 1 ].boolValue  =  1 ;
 dd_MenuLine_setStringValue( 1 ,
 dd_indicators[dd_Dashboard_getIndicatorIndexAtPosition( 1 )].description);

  dd_menuLines[ 2 ].intValue  = dd_Dashboard_getIndicatorIndexAtPosition(
  2 );
  dd_menuLines[ 1 ].boolValue  =  2 ;
 dd_MenuLine_setStringValue( 2 ,
 dd_indicators[dd_Dashboard_getIndicatorIndexAtPosition( 2 )].description);

  dd_menuLines[ 3 ].intValue  = dd_Dashboard_getIndicatorIndexAtPosition(
  3 );
  dd_menuLines[ 1 ].boolValue  =  3 ;

 dd_MenuLine_setStringValue( 3 ,
 dd_indicators[dd_Dashboard_getIndicatorIndexAtPosition( 3 )].description);
 dd_MenuLine_setBoolValue( 4 , dd_GraphicController_areColorsInverted());

 dd_MenuLine_setBoolValue( 5 , dGear_isShiftingCheckBypassed());

 dd_Interface_drawTitle("Settings");
 }
 dd_printMenu();
}



unsigned char indexIndicatorToChange =  255 ;
unsigned char positionToChange;

void dd_Interface_onSettingsChange(char direction) {
 unsigned char indexIndicator, position;
 position =  50 ;
 switch (dd_Menu_SelectedLine) {
 case  0 :
 position =  0 ;
 break;
 case  1 :
 position =  1 ;
 break;
 case  2 :
 position =  2 ;
 break;
 case  3 :
 position =  3 ;
 break;
 case  4 :
 dd_GraphicController_invertColors();
 dd_MenuLine_switchBoolValue( 4 );
 break;
 case  5 :
 if (dGear_isShiftingCheckBypassed()) {
 dGear_enableShiftCheck();
 dd_MenuLine_setBoolValue( 5 ,  0 );
 } else {
 dGear_disableShiftCheck();
 dd_MenuLine_setBoolValue( 5 ,  1 );
 }
 break;
 default:
 break;
 }
 if (position !=  50 ) {


 indexIndicator = dd_menuLines[dd_Menu_SelectedLine].intValue;

 if (direction ==  1 ) {
 indexIndicator += 1;
 if (indexIndicator == dd_Dashboard_indicatorsCount) {
 indexIndicator = 0;
 }
 } else {
 if (indexIndicator > 0) {
 indexIndicator -= 1;
 } else {
 indexIndicator = dd_Dashboard_indicatorsCount - 1;
 }
 }

 indexIndicatorToChange = indexIndicator;
 positionToChange = position;
 dd_menuLines[dd_Menu_SelectedLine].intValue = indexIndicator;
 dd_MenuLine_setStringValue(dd_Menu_SelectedLine, dd_indicators[indexIndicator].description);
 }
}

void dd_Interface_applySettings(void) {
 if (indexIndicatorToChange !=  255 ) {
 dd_Indicator_setPrintPosition(dd_indicators[indexIndicatorToChange].id, positionToChange);
 }
}

void dd_Interface_printDebug(void) {
 unsigned char i;
 if (dd_GraphicController_isFrameUpdateForced()) {
 dd_Interface_drawTitle("Debug");
 dd_Menu_reset();
 dd_Menu_setY_OFFSET(3);
 dd_Menu_setHeight(5);
 for (i = 0; i < sizeof(INDICATORS_LIST); i += 1) {
 dd_Menu_addLine(i, dd_indicators[i].description);
 }
 }
 for (i = 0; i < sizeof(INDICATORS_LIST); i += 1) {

 switch (dd_indicators[i].valueType) {
 case  0 :
 dd_MenuLine_setStringValue(i, dd_indicators[i].stringValue);
 break;
 case  1 :
 dd_MenuLine_setIntValue(i, dd_indicators[i].intValue);
 break;
 case  2 :
 dd_MenuLine_setFloatValue(i, dd_indicators[i].floatValue);
 break;
 case  3 :
 dd_MenuLine_setBoolValue(i, dd_indicators[i].boolValue);
 break;
 default:
 break;
 }
 }
 dd_printMenu();
}

void dd_Interface_printParameterPage(unsigned char parameter) {
 unsigned char x, y, oldValueWidth, indicatorIndex;
 indicatorIndex = dd_Dashboard_getIndicatorIndex(parameter);
 oldValueWidth = dd_indicators[indicatorIndex].valueWidth;

 if (dd_GraphicController_isFrameUpdateForced()) {
 dd_Interface_drawTitle(dd_indicators[indicatorIndex].description);
 }

 if (!dd_GraphicController_isFrameUpdateForced() &&
 !dd_Dashboard_isPrintedIndicatorRequestingUpdate(indicatorIndex)) {
 return;
 }

  xGlcd_Set_Font ( DynamisFont_Big32x31, 32 , 31 , 45 );

 x = dd_Interface_getTitleX(dd_indicators[indicatorIndex].stringValue);
 y = dd_Interface_getParameterValueY();

 eGlcd_clearText(dd_indicators[indicatorIndex].stringValue, x, y);

 dd_Indicator_makeTextValue(indicatorIndex);
 if (oldValueWidth != dd_indicators[indicatorIndex].valueWidth) {

 x = dd_Interface_getTitleX(dd_indicators[indicatorIndex].stringValue);
 }
 eGlcd_writeText(dd_indicators[indicatorIndex].stringValue, x, y);

 dd_Dashboard_clearIndicatorPrintUpdateRequest(indicatorIndex);
}

void dd_Interface_drawTitle(char *title) {
  xGlcd_Set_Font ( DynamisFont_Dashboard16x16, 16 , 16 , 32 );
 eGlcd_writeText(title, dd_Interface_getTitleX(title), dd_Interface_getTitleY());
 dd_Interface_drawTitleContainers();
}

void dd_Interface_drawTitleContainers(void) {
 unsigned char x, y;
  Glcd_Rectangle_Round_Edges( 1 , 1 , 128  - 1  * 2, 16  + 3  * 2, 3 , BLACK ); ;
#line 220 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_interfaces.c"
}

unsigned char dd_Interface_getTitleX(char *title) {
 return (unsigned char) (SCREEN_X_MIDDLE - eGlcd_getTextPixelLength(title) / 2);
}

unsigned char dd_Interface_getTitleY(void) {
 return  3  +  1 ;
}

unsigned char dd_Interface_getParameterValueX(unsigned char indicatorIndex) {
 return (unsigned char) (SCREEN_X_MIDDLE -
 (dd_indicators[indicatorIndex].valueWidth *  ( 32  - 32 /4) ) / 2);
}

unsigned char dd_Interface_getParameterValueY(void) {
 return (unsigned char) ( 3  * 2 +  16  +
 (( 64  - ( 3  * 2 +  16 )) / 2) -
 ( 31  / 2));
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/dd_graphic_controller.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/dd_graphic_controller.h"
#line 10 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/dd_graphic_controller.c"
unsigned char dd_graphicInterfaceIndex = 0, dd_lastGraphicInterfaceIndex = 0;
char dd_isInterfaceChangedFromLastFrame =  0 , dd_isFrameUpdateForced =  0 , dd_isNextFrameUpdateForced =  0 , dd_isColorInversionQueued =  0 ;

void dd_GraphicController_init(void) {
  TRISB15_bit  =  0 ;
 dd_GraphicController_turnOnBacklight();
 eGlcd_init();

 dd_Dashboard_init();
 eGlcd_clear();
 dd_GraphicController_setInterface( 0 );
 dd_GraphicController_printFrame();
 dd_GraphicController_timerSetup();
}

void dd_GraphicController_turnOnBacklight(void) {
  RB15_bit  =  1 ;
}

void dd_GraphicController_turnOffBacklight(void) {
  RB15_bit  =  0 ;
}

void dd_GraphicController_switchBacklight(void) {
  RB15_bit  = ! RB15_bit ;
}

void dd_GraphicController_invertColors(void) {
 dd_GraphicController_queueColorInversion();
 dd_GraphicController_forceNextFrameUpdate();
}

char dd_GraphicController_areColorsInverted(void) {
 return BLACK ==  0 ;
}

void dd_GraphicController_setInterface(unsigned char interface) {
 unsigned char i;
 dd_isInterfaceChangedFromLastFrame =  1 ;
 dd_GraphicController_saveInterfaceIndex();
 dd_graphicInterfaceIndex = 0;
 for (i = 0; i < sizeof(INTERFACE_LIST); i += 1) {
 if (INTERFACE_LIST[i] == interface) {
 dd_graphicInterfaceIndex = i;
 break;
 }
 }
}

unsigned char dd_GraphicController_getInterface(void) {
 return INTERFACE_LIST[dd_graphicInterfaceIndex];
}

char dd_GraphicController_isInterfaceChangedFromLastFrame(void) {
 return dd_isInterfaceChangedFromLastFrame;
}

void dd_GraphicController_switchNextInterface(void) {
 dd_GraphicController_saveInterfaceIndex();
 if (dd_graphicInterfaceIndex < (sizeof(INTERFACE_LIST) - 1 -  3 )) {
 dd_graphicInterfaceIndex += 1;
 }
 dd_isInterfaceChangedFromLastFrame =  1 ;
}

void dd_GraphicController_switchPreviousInterface(void) {
 dd_GraphicController_saveInterfaceIndex();
 if (dd_graphicInterfaceIndex > 0) {
 dd_graphicInterfaceIndex -= 1;
 }
 dd_isInterfaceChangedFromLastFrame =  1 ;
}

void dd_GraphicController_switchLastInterface(void) {
 dd_GraphicController_setInterface(INTERFACE_LIST[dd_lastGraphicInterfaceIndex]);
}

void dd_GraphicController_saveInterfaceIndex(void) {
 if (dd_lastGraphicInterfaceIndex != dd_graphicInterfaceIndex) {
 dd_lastGraphicInterfaceIndex = dd_graphicInterfaceIndex;
 }
}

void dd_GraphicController_printFrame(void) {
 if (dd_GraphicController_isColorInversionQueued()) {
 eGlcd_invertColors();
 dd_isColorInversionQueued =  0 ;
 }
 if (dd_GraphicController_isInterfaceChangedFromLastFrame() || dd_GraphicController_isNextFrameUpdateForced()) {
 eGlcd_clear();
 dd_GraphicController_forceFullFrameUpdate();
 dd_isInterfaceChangedFromLastFrame =  0 ;
 }
 switch (INTERFACE_LIST[dd_graphicInterfaceIndex]) {
 case  0 :
 dd_Interface_printDashboard();
 break;
 case  10 :
 dd_Interface_printParameterPage( 14 );
 break;
 case  20 :
 dd_Interface_printParameterPage( 0 );
 break;
 case  11 :
 dd_Interface_printParameterPage( 8 );
 break;
 case  12 :
 dd_Interface_printParameterPage( 9 );
 break;
 case  2 :
 dd_Interface_printSettings();
 break;
 case  1 :
 dd_Interface_printDebug();
 break;
 case  3 :
 dd_Interface_printMessage("ERROR");
 break;
 case  5 :
 dd_Interface_printMessage("Warning");
 break;
 case  4 :
 dd_Interface_printMessage("Message");
 break;
 default:
 break;
 }
 if (dd_GraphicController_isFrameUpdateForced()) {
 dd_isFrameUpdateForced =  0 ;
 }
 if (dd_GraphicController_isNextFrameUpdateForced()) {
 dd_isNextFrameUpdateForced =  0 ;
 }
 dd_GraphicController_handleAlert();
}

void dd_GraphicController_forceFullFrameUpdate(void) {
 dd_isFrameUpdateForced =  1 ;
}

void dd_GraphicController_releaseFullFrameUpdate(void) {
 dd_isFrameUpdateForced =  0 ;
}

void dd_GraphicController_forceNextFrameUpdate(void) {
 dd_isNextFrameUpdateForced =  1 ;
}

char dd_GraphicController_isFrameUpdateForced(void) {
 return dd_isFrameUpdateForced;
}

char dd_GraphicController_isNextFrameUpdateForced(void) {
 return dd_isNextFrameUpdateForced;
}

void dd_GraphicController_queueColorInversion(void) {
 dd_isColorInversionQueued =  1 ;
}

char dd_GraphicController_isColorInversionQueued(void) {
 return dd_isColorInversionQueued;
}

void dd_GraphicController_handleAlert(void) {
 if (dd_alertTicks > 0) {
 dd_alertTicks -= 1;
 if (dd_alertTicks == 0) {
 dd_Dashboard_clearAlerts();
 }
 }
}

void dd_GraphicController_timerSetup(void) {
 setTimer( 1 , FRAME_PERIOD);
 setInterruptPriority( 1 ,  2 );
  IFS0bits.T1IF  = 0 ;
}

void dd_GraphicController_onTimerInterrupt(void) {
  IFS0bits.T1IF  = 0 ;
#line 195 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/dd_graphic_controller.c"
 dd_GraphicController_printFrame();
#line 199 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/dd_graphic_controller.c"
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_signalled.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_signalled.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/dspic.h"
#line 30 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_signalled.h"
void dSignalLed_init(void);

void dSignalLed_switch(unsigned char led);

void dSignalLed_set(unsigned char led);

void dSignalLed_unset(unsigned char led);
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_signalled.c"
void dSignalLed_init(void) {
  TRISF5_bit  =  0 ;
  TRISF4_bit  =  0 ;
  TRISG1_bit  =  0 ;
 dSignalLed_set( 1 );
 dSignalLed_set( 2 );
 dSignalLed_set( 0 );
 delay_ms(100);
 dSignalLed_unset( 1 );
 dSignalLed_unset( 2 );
 dSignalLed_unset( 0 );
}

void dSignalLed_switch(unsigned char led) {
 switch (led) {
 case  0 :
  RF5_bit  = ! RF5_bit ;
 break;
 case  1 :
  RF4_bit  = ! RF4_bit ;
 break;
 case  2 :
  RG1_bit  = ! RG1_bit ;
 break;
 }
}

void dSignalLed_set(unsigned char led) {
 switch (led) {
 case  0 :
  RF5_bit  =  1 ;
 break;
 case  1 :
  RF4_bit  =  1 ;
 break;
 case  2 :
  RG1_bit  =  1 ;
 break;
 }
}

void dSignalLed_unset(unsigned char led) {
 switch (led) {
 case  0 :
  RF5_bit  =  0 ;
 break;
 case  1 :
  RF4_bit  =  0 ;
 break;
 case  2 :
  RG1_bit  =  0 ;
 break;
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_paddle.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_paddle.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/dspic.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../display/dd_dashboard.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_can.h"
#line 15 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_paddle.h"
void dPaddle_init(void);

unsigned char dPaddle_getValue(void);

void dPaddle_readSample(void);
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_paddle.c"
unsigned int dPaddle_value = 0;

void dPaddle_init(void) {
 setupAnalogSampling();
 setAnalogPIN( 14 );
 turnOnAnalogModule();
}


unsigned char dPaddle_getValue(void) {
 return (unsigned char) (dPaddle_value / 38);
}

void dPaddle_readSample(void) {
 unsigned int analogValue;
 analogValue = getAnalogValue();
 if (analogValue <= 0) {
 dPaddle_value = 0;
 } else if (analogValue >  3800 ) {
 dPaddle_value =  3800 ;
 } else {
 dPaddle_value = (unsigned int) ((analogValue * 0.8) + (dPaddle_value * 0.2));
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_ledstripe.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_ledstripe.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_ledstripe.c"
unsigned char dLedStripe_colorSelector =  0b00000001 ;
unsigned char dLedStripe_redStripe = 0, dLedStripe_greenStripe = 0, dLedStripe_blueStripe = 0;
unsigned char dRedPersistenceCounter = 0;

void dLedStripe_init(void) {
  TRISD2_bit  =  0 ;
  TRISD3_bit  =  0 ;
  TRISD4_bit  =  0 ;
  TRISD5_bit  =  0 ;
  TRISD6_bit  =  0 ;
  TRISD7_bit  =  0 ;
  TRISG12_bit  =  0 ;
  TRISG0_bit  =  0 ;
  TRISG14_bit  =  0 ;
 dLedStripe_clear();
}

void dLedStripe_debugByte(unsigned char debugByte) {
 unsigned char i;
 for (i =  6 ; i > 0; i -= 1) {
 if (debugByte & 1) {
 dLedStripe_setLedColorAtPosition( 0b00000001 , i - 1);
 } else {
 dLedStripe_setLedColorAtPosition( 0b00000000 , i - 1);
 }
 debugByte = debugByte >> 1;
 }
}

void dLedStripe_clear(void) {
 unsigned char i = 0;
 for (i = 0; i <  6 ; i += 1) {
 dLedStripe_setLedColorAtPosition( 0b00000000 , i);
 }
}

void dLedStripe_setLedColorAtPosition(unsigned char color, unsigned char led) {
 dLedStripe_setLedFromByteStripe(&dLedStripe_redStripe, led, color & 1);
 color = color >> 1;
 dLedStripe_setLedFromByteStripe(&dLedStripe_greenStripe, led, color & 1);
 color = color >> 1;
 dLedStripe_setLedFromByteStripe(&dLedStripe_blueStripe, led, color & 1);
}

void dLedStripe_setLedStripe(unsigned char colors[]) {
 unsigned char i;
 for (i = 0; i <  6 ; i += 1) {
 dLedStripe_setLedColorAtPosition(colors[i], i);
 }
}

void dLedStripe_switchLedColorAtPosition(unsigned char color, unsigned char led) {
 unsigned char currentColor;
 currentColor = dLedStripe_getLedColorAtPosition(led);
 if (color == currentColor) {
 dLedStripe_setLedColorAtPosition( 0b00000000 , led);
 } else {
 dLedStripe_setLedColorAtPosition(color, led);
 }
}

unsigned char dLedStripe_getLedColorAtPosition(unsigned char led) {
 unsigned char finalColor;
 finalColor = 0;
 if ((dLedStripe_redStripe >> led) & 1) {
 finalColor = finalColor |  0b00000001 ;
 }
 if ((dLedStripe_greenStripe >> led) & 1) {
 finalColor = finalColor |  0b00000010 ;
 }
 if ((dLedStripe_blueStripe >> led) & 1) {
 finalColor = finalColor |  0b00000100 ;
 }
 return finalColor;
}

void dLedStripe_setLedFromByteStripe(unsigned char *stripe, unsigned char led, unsigned char on) {
 if (on) {
 *stripe = *stripe | (1 << led);
 } else {
 *stripe = *stripe & (~(1 << led));
 }
}

void dLedStripe_updateFrame(void) {
 dLedStripe_hardClearColors();
 switch (dLedStripe_colorSelector) {
 case  0b00000001 :
 dLedStripe_hardSetLedStripe(dLedStripe_redStripe);
 dLedStripe_hardSetColor(dLedStripe_colorSelector);
 dRedPersistenceCounter += 1;
 if (dRedPersistenceCounter ==  7 ) {
 dLedStripe_colorSelector =  0b00000010 ;
 dRedPersistenceCounter = 0;
 }
 break;
 case  0b00000010 :
 dLedStripe_hardSetLedStripe(dLedStripe_greenStripe);
 dLedStripe_hardSetColor(dLedStripe_colorSelector);
 dLedStripe_colorSelector =  0b00000100 ;
 break;
 case  0b00000100 :
 dLedStripe_hardSetLedStripe(dLedStripe_blueStripe);
 dLedStripe_hardSetColor(dLedStripe_colorSelector);
 dLedStripe_colorSelector =  0b00000001 ;
 break;
 }
}

void dLedStripe_hardSetLedStripe(unsigned char stripe) {
 unsigned char i;
 for (i = 0; i <  6 ; i += 1) {
 if (stripe & 1) {
 dLedStripe_hardSetLedPin(i);
 } else {
 dLedStripe_hardUnsetLedPin(i);
 }
 stripe = stripe >> 1;
 }
}

void dLedStripe_hardClearColors(void) {
  LATG12_bit  =  1 ;
  RG14_bit  =  1 ;
  RG0_bit  =  1 ;
}

void dLedStripe_hardSetColor(unsigned char color) {
 switch (color) {
 case  0b00000001 :
  LATG12_bit  =  0 ;
 break;
 case  0b00000010 :
  RG0_bit  =  0 ;
 break;
 case  0b00000100 :
  RG14_bit  =  0 ;
 break;
 }
}

void dLedStripe_hardSetLedPin(unsigned char led) {
 switch (led) {
 case  0 :
  RD2_bit  =  1 ;
 break;
 case  1 :
  RD3_bit  =  1 ;
 break;
 case  2 :
  RD4_bit  =  1 ;
 break;
 case  3 :
  RD5_bit  =  1 ;
 break;
 case  4 :
  RD6_bit  =  1 ;
 break;
 case  5 :
  RD7_bit  =  1 ;
 break;
 }
}

void dLedStripe_hardUnsetLedPin(unsigned char led) {
 switch (led) {
 case  0 :
  RD2_bit  =  0 ;
 break;
 case  1 :
  RD3_bit  =  0 ;
 break;
 case  2 :
  RD4_bit  =  0 ;
 break;
 case  3 :
  RD5_bit  =  0 ;
 break;
 case  4 :
  RD6_bit  =  0 ;
 break;
 case  5 :
  RD7_bit  =  0 ;
 break;
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_buttons.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_buttons.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/buttons.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/buttons.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/dspic.h"
#line 50 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/buttons.h"
void button_onR1Down(void);

void button_onR2Down(void);

void button_onR3Down(void);

void button_onL1Down(void);

void button_onL2Down(void);

void button_onL3Down(void);

void button_onBRDown(void);

void button_onBLDown(void);

void button_onCDown(void);

void Buttons_init(void);

void Buttons_protractPress(unsigned char button, unsigned int milliseconds);

void Buttons_tick(void);

char Buttons_isPressureProtracted(void);

void Buttons_clearPressureProtraction(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/../modules/input-output/d_signalled.h"
#line 10 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/buttons.c"
 void external0() iv IVT_ADDR_INT0INTERRUPT ics ICS_AUTO {
 Delay_ms( 1 );
 if ( RF3_bit  ==  0 ) {
 button_onBRDown();
 } else if ( RF2_bit  ==  0 ) {
 button_onBLDown();
 }
 clearExternalInterrupt( 4 );
}

 void external1() iv IVT_ADDR_INT1INTERRUPT ics ICS_AUTO {
 Delay_ms( 1 );
 if ( RB11_bit  ==  0 ) {
 button_onL1Down();
 } else if ( RB12_bit  ==  0 ) {
 button_onL2Down();
 } else if ( RG2_bit  ==  0 ) {
 button_onL3Down();
 }
 clearExternalInterrupt( 5 );
}

 void external2() iv IVT_ADDR_INT2INTERRUPT ics ICS_AUTO {
 Delay_ms( 1 );
 if ( RB9_bit  ==  0 ) {
 button_onR1Down();
 } else if ( RB10_bit  ==  0 ) {
 button_onR2Down();
 } else if ( RG3_bit  ==  0 ) {
 button_onR3Down();
 }
 clearExternalInterrupt( 6 );
}

 void external4() iv IVT_ADDR_INT4INTERRUPT ics ICS_AUTO {
 Delay_ms( 1 );
 button_onCDown();
 clearExternalInterrupt( 8 );
}

void Buttons_init(void) {
  TRISB9_bit  =  1 ;
  TRISB10_bit  =  1 ;
  TRISG3_bit  =  1 ;
  TRISB11_bit  =  1 ;
  TRISB12_bit  =  1 ;
  TRISG2_bit  =  1 ;
  TRISF2_bit  =  1 ;
  TRISF3_bit  =  1 ;

 setExternalInterrupt( 4 ,  1 );
 setExternalInterrupt( 5 ,  1 );
 setExternalInterrupt( 6 ,  1 );
 setExternalInterrupt( 8 ,  1 );
}

unsigned int buttons_pressureProtraction = 0;
unsigned char buttons_pressureProtractionButton;
char buttons_pressureProtractionFlag =  0 ;

void Buttons_protractPress(unsigned char button, unsigned int milliseconds) {
 if (!Buttons_isPressureProtracted()) {
 buttons_pressureProtraction = milliseconds;
 buttons_pressureProtractionButton = button;
 buttons_pressureProtractionFlag =  1 ;
 }
}

void Buttons_tick(void) {
 if (buttons_pressureProtraction > 0) {
 buttons_pressureProtraction -= 1;
 if (buttons_pressureProtraction == 0) {
 switch (buttons_pressureProtractionButton) {
 case  0 :
 button_onR1Down();
 break;
 case  1 :
 button_onR2Down();
 break;
 case  2 :
 button_onR3Down();
 break;
 case  3 :
 button_onL1Down();
 break;
 case  4 :
 button_onL2Down();
 break;
 case  5 :
 button_onL3Down();
 break;
 case  7 :
 button_onBLDown();
 break;
 case  6 :
 button_onBRDown();
 break;
 default:
 break;
 }
 } else {
 switch (buttons_pressureProtractionButton) {
 case  0 :
 if ( RB9_bit  !=  0 ) {
 buttons_pressureProtraction = 0;
 Buttons_clearPressureProtraction();
 }
 break;
 case  1 :
 if ( RB10_bit  !=  0 ) {
 buttons_pressureProtraction = 0;
 Buttons_clearPressureProtraction();
 }
 break;
 case  2 :
 if ( RG3_bit  !=  0 ) {
 buttons_pressureProtraction = 0;
 Buttons_clearPressureProtraction();
 }
 break;
 case  3 :
 if ( RB11_bit  !=  0 ) {
 buttons_pressureProtraction = 0;
 Buttons_clearPressureProtraction();
 }
 break;
 case  4 :
 if ( RB12_bit  !=  0 ) {
 buttons_pressureProtraction = 0;
 Buttons_clearPressureProtraction();
 }
 break;
 case  5 :
 if ( RG2_bit  !=  0 ) {
 buttons_pressureProtraction = 0;
 Buttons_clearPressureProtraction();
 }
 break;
 case  7 :
 if ( RF2_bit  !=  0 ) {
 buttons_pressureProtraction = 0;
 Buttons_clearPressureProtraction();
 }
 break;
 case  6 :
 if ( RF3_bit  !=  0 ) {
 buttons_pressureProtraction = 0;
 Buttons_clearPressureProtraction();
 }
 break;
 default:
 break;
 }
 }
 }
}

char Buttons_isPressureProtracted(void) {
 return buttons_pressureProtractionFlag;
}

void Buttons_clearPressureProtraction(void) {
 buttons_pressureProtractionFlag =  0 ;
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../dd_graphic_controller.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../modules/d_can.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_start.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_can.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 11 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_start.h"
void dStart_switchOn(void);

void dStart_switchOff(void);

char dStart_isSwitchedOn(void);

void dStart_sendStartMessage(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_rio.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../display/dd_dashboard.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_can.h"
#line 14 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_rio.h"
void dRio_switchAcquisition(void);

void dRio_zeroAcquisition(void);

void dRio_startAcquisition(void);

void dRio_stopAcquisition(void);

void dRio_heartBeat(void);

void dRio_die(void);

void dRio_tick(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_hardreset.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_acceleration.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../display/dd_dashboard.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_clutch.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../input-output/d_paddle.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_can.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../display/dd_dashboard.h"
#line 12 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_clutch.h"
unsigned char dClutch_actualValue = 0, dClutch_value = 0;

void dClutch_set(unsigned char value);

void dClutch_injectActualValue(unsigned char value);

unsigned char dClutch_get(void);

void dClutch_send(void);
#line 27 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_acceleration.h"
typedef enum aac_notifications{
 MEX_ON,
 MEX_READY,
 MEX_GO,
 MEX_OFF,
}aac_notifications;

char dAcc_autoAcceleration =  0 ;
char dAcc_releasingClutch =  0 ;
char dAcc_ramping =  0 ;
double dAcc_rampStep = 0;
unsigned int dAcc_steps = 0;
unsigned char dAcc_endingRampValue = 0;
unsigned char dAcc_currentClutchValue = 0;
unsigned int dAcc_rampTime =  210 ;
unsigned int dAcc_trim1 =  500 ;
unsigned int dAcc_trim2 =  500 ;

void dAcc_init(void);
#line 61 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_acceleration.h"
void dAcc_startAutoAcceleration(void);

char dAcc_isAutoAccelerationActive(void);

char dAcc_isReleasingClutch(void);

void dAcc_startClutchRelease(void);

void dAcc_stopAutoAcceleration(void);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../d_ebb.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_buttons.c"
void  button_onBRDown () {

 if (dGear_canGearUp() || d_isNeutralSet) {
 Can_writeInt( 0b10100000000 ,  400 );
 } else {

 }
}

void  button_onBLDown () {

 if (dGear_canGearDown() || d_isNeutralSet) {
 Can_writeInt( 0b10100000000 ,  200 );
 } else {

 }
}

void  button_onCDown () {
 if (getExternalInterruptEdge( 8 ) ==  1 ) {
 dSignalLed_set( 2 );
 dStart_switchOn();
 switchExternalInterruptEdge( 8 );
 } else {
 dSignalLed_unset( 2 );
 dStart_switchOff();
 switchExternalInterruptEdge( 8 );
 }
}

void  button_onL3Down () {
 if (dd_GraphicController_getInterface() ==  2 ) {
 dd_Interface_applySettings();
 }
 if (dd_GraphicController_getInterface() ==  20 ) {
 if (dEbb_isCalibrateing() ==  1 ){
 dEbb_calibrateSwitch();
 }
 }
 if (dd_GraphicController_getInterface() !=  4  &&
 dd_GraphicController_getInterface() !=  3 ) {
 if (dd_GraphicController_getInterface() ==  0  && !d_isNeutralSet) {
 if (!Buttons_isPressureProtracted()) {
 Buttons_protractPress( 5 , 1000);
 } else {
 Buttons_clearPressureProtraction();
 dd_GraphicController_switchPreviousInterface();
 }
 } else {
 dd_GraphicController_switchPreviousInterface();
 }
 }
 if (dd_GraphicController_getInterface() ==  1 )
 {
 if (!Buttons_isPressureProtracted())
 {
 Buttons_protractPress( 5 , 1000);
 }
 else
 {
 Buttons_clearPressureProtraction();
 dRio_zeroAcquisition();
 }
 }
}

void  button_onR3Down () {
 if (dd_GraphicController_getInterface() ==  2 ) {
 dd_Interface_applySettings();
 }
 if (dd_GraphicController_getInterface() ==  20 ) {
 if (dEbb_isCalibrateing() ==  1 ){
 dEbb_calibrateSwitch();
 }
 }
 if (dd_GraphicController_getInterface() !=  4  &&
 dd_GraphicController_getInterface() !=  3 ) {
 if (dd_GraphicController_getInterface() ==  0  && !d_isNeutralSet) {
 if (!Buttons_isPressureProtracted()) {
 Buttons_protractPress( 2 , 1000);
 } else {
 Buttons_clearPressureProtraction();
 dd_GraphicController_switchNextInterface();
 }
 } else {
 dd_GraphicController_switchNextInterface();
 }
 }
}

void  button_onL2Down () {
 if (!d_isNeutralSet) {
 if (dGear_get() == 1) {
 Can_writeInt( 0b10100000000 ,  50 );
 } else if (dGear_get() == 2) {
 Can_writeInt( 0b10100000000 ,  100 );
 }
 }
}

void  button_onR1Down () {
 if (dd_GraphicController_getInterface() ==  0 ) {
 dHardReset_reset();
 } else if (dd_GraphicController_getInterface() ==  20 ) {
 if (dEbb_isCalibrateing() ==  0 ) {
 dEbb_increase();
 }
 }
#line 123 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_buttons.c"
 else {
 dd_Menu_selectUp();
 }
}

void  button_onR2Down () {
 if (dd_GraphicController_getInterface() ==  20 ) {
 if (dEbb_isCalibrateing() ==  0 ) {
 dEbb_decrease();
 }
 }
#line 142 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_buttons.c"
 else {
 dd_Menu_selectDown();
 }
}

void  button_onL1Down () {
 if (dd_GraphicController_getInterface() ==  2 ) {
 dd_Interface_onSettingsChange( 1 );
 } else if (dd_GraphicController_getInterface() ==  20 ) {
 dEbb_calibrateSwitch();
 } else if (dd_GraphicController_getInterface() ==  1 ) {
 dRio_switchAcquisition();
 } else if (dd_GraphicController_getInterface() ==  0 ) {
 if (!dAcc_isAutoAccelerationActive()) {
 if (!Buttons_isPressureProtracted()) {
 Buttons_protractPress( 3 , 1000);
 } else {
 Buttons_clearPressureProtraction();

 Can_writeInt( 0b11011110000 , 0);
 }
 } else {
 if (dAcc_isReleasingClutch()) {

 Can_writeInt( 0b11011110000 , 0);
 } else {

 Can_writeInt( 0b11011110000 , 0);
 }
 }
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/buzzer.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/buzzer.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/dspic.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/../../libs/music.h"
#line 18 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/buzzer.h"
void Buzzer_init(void);

void Buzzer_tick(void);

void Buzzer_bip(void);
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/buzzer.c"
unsigned int buzzer_ticks = 0, buzzer_bipTicks;

 void timer4_interrupt() iv IVT_ADDR_T4INTERRUPT ics ICS_AUTO {
  IFS1bits.T4IF  = 0 ;
 Buzzer_tick();
#line 19 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/buzzer.c"
}

void Buzzer_init(void) {
  TRISD0_bit  =  0 ;
  RD0_bit  = 0;
 setTimer( 3 ,  0.0005 );
 setInterruptPriority( 3 ,  5 );
 buzzer_bipTicks = (int) ( 0.1  /  0.0005 );
}

void Buzzer_tick(void) {
 if (buzzer_ticks > 0) {
 buzzer_ticks -= 1;
  RD0_bit  = ! RD0_bit ;
 }
}

void Buzzer_bip(void) {
 buzzer_ticks = buzzer_bipTicks;
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_clutch.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_clutch.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_clutch.c"
int i = 0;

void dClutch_send(void) {
 Can_writeByte( 0b11000000001 , dClutch_value);
}

void dClutch_set(unsigned char value) {
 if (value > 100) {
 value = 100;
 }
 dClutch_value = value;
}

void dClutch_injectActualValue(unsigned char value) {
 dClutch_actualValue = value;
 dd_Indicator_setIntValue( 4 , dClutch_actualValue);

}

unsigned char dClutch_get(void) {
 return dClutch_actualValue;
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_efisense.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_efisense.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_dashboard.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_signalled.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_hardreset.h"
#line 18 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_efisense.h"
void dEfiSense_heartbeat(void);

void dEfiSense_tick(void);

void dEfiSense_die(void);

char dEfiSense_isDead(void);

float dEfiSense_calculateTemperature(unsigned int value);

float dEfiSense_calculatePressure(unsigned int value);

float dEfiSense_calculateVoltage(unsigned int value);
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_efisense.c"
unsigned int dEfiSense_ticks =  1000 ;
char dEfiSense_dead =  1 , dEfiSense_detectReset =  0 ;

void dEfiSense_heartbeat(void) {
 dEfiSense_detectReset =  1 ;
 dEfiSense_dead =  0 ;
 dEfiSense_ticks =  1000 ;
 dd_Indicator_setBoolValue( 7 , !dEfiSense_isDead());
 dSignalLed_set( 0 );
}

void dEfiSense_tick(void) {
 if (dEfiSense_ticks > 0) {
 dEfiSense_ticks -= 1;
 if (dEfiSense_ticks == 0) {
 dEfiSense_die();
 if (dEfiSense_detectReset) {
 dHardReset_reset();
 }
 }
 }
}

void dEfiSense_die(void) {
 dEfiSense_dead =  1 ;
 dd_Indicator_setBoolValue( 7 , !dEfiSense_isDead());
 dSignalLed_unset( 0 );
}

char dEfiSense_isDead(void) {
 return dEfiSense_dead;
}

float dEfiSense_calculateTemperature(unsigned int value) {
 return ((int) ((((value *  160 ) / 256.0) -  10 ) * 100)) / 100.0;
}

float dEfiSense_calculatePressure(unsigned int value) {
 return (value / 10) / 100.0;
}

float dEfiSense_calculateVoltage(unsigned int value) {
 return ((int) (((value *  18 ) / 1024.0) * 100)) / 100.0;
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_ebb.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_ebb.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_ebb.c"
int dEbb_localValue = 0, dEbb_value = 0, dEbb_motorState = 0;

unsigned int dEbb_motorSense = 0, stateFlag = 0;
int dEbb_calibration =  15 ;
int dEbb_state =  112 ;
int calibrationState =  0 ;
char textMessage;

void dEbb_init(void) {
 dd_Indicator_setIntValue( 0 , dEbb_value);
}

void dEbb_calibrateSwitch(void) {
 if (dEbb_isCalibrateing() ==  1 ){
 dEbb_calibrateStop();
 calibrationState =  0 ;
 dSignalLed_switch( 0 );
 } else if (dEbb_isCalibrateing() ==  0 ) {
 calibrationState =  1 ;
 dSignalLed_switch( 0 );
 }
}

int dEbb_isCalibrateing(void) {
 return calibrationState;
}

void dEbb_calibrateUp(void) {
 Can_writeByte( 0b11001001101 , (unsigned char)  101 );
}

void dEbb_calibrateDown(void) {
 Can_writeByte( 0b11001001101 , (unsigned char)  99 );
}

void dEbb_calibratePause(void) {
 Can_writeByte( 0b11001001101 , (unsigned char)  100 );
}

void dEbb_calibrateStop(void) {
 Can_writeByte( 0b11001001101 , (unsigned char)  4 );
 dEbb_localValue = 0;

}

void dEbb_increase(void) {
 if (dEbb_state !=  100 ) {
 if (dEbb_localValue >  -3 ) {
 dEbb_localValue -= 1;
 dEbb_propagateSteeringWheelChange( 1 );
 }
 }
}

void dEbb_decrease(void) {
 if (dEbb_state !=  100 ) {
 if (dEbb_localValue <  3 ) {
 dEbb_localValue += 1;
 dEbb_propagateSteeringWheelChange( 0 );
 }
 }
}

void dEbb_setEbbValueFromCAN(unsigned int value) {
 switch (value){
 case  100 :
 dEbb_state =  100 ;
 break;
 case  122 :
 dEbb_state =  122 ;
 break;
 case  124 :
 dEbb_state =  124 ;
 break;
 case  10 :
 dEbb_state =  10 ;
 break;
 default:
 dEbb_state =  112 ;
 dEbb_value = value -  4 ;
 dEbb_localValue = dEbb_value;
 break;
 }
}

void dEbb_setEbbMotorStateFromCAN(unsigned int motorState) {
 dEbb_motorState = motorState;
}

void dEbb_setEbbMotorSenseFromCAN(unsigned int motorSense) {
 dEbb_motorSense = motorSense;
}

void dEbb_propagateSteeringWheelChange(unsigned char action) {
 Can_writeByte( 0b11001001101 , (unsigned char) (dEbb_localValue +  4 ));
}

void dEbb_propagateEbbChange(void) {
switch (dEbb_state){
 case  100 :
 dd_Indicator_setStringValue( 0 , "=0=");
 break;
 case  122 :
 dd_Indicator_setStringValue( 0 , "/");
 break;
 case  124 :
 dd_Indicator_setStringValue( 0 , ";");
 break;
 case  10 :
 dd_Indicator_setStringValue( 0 , "...");
 break;
 default:
 dd_Indicator_setIntValue( 0 , -dEbb_value);
 break;
 }
}

void dEbb_tick(void) {
switch (dEbb_state){
 case  122 :
 dSignalLed_set( 2 );
 stateFlag = 1;
 break;
 case  124 :
 stateFlag = 1;
 dSignalLed_set( 2 );
 break;
 default:
 if(stateFlag == 1){
 dSignalLed_unset( 2 );
 stateFlag = 0;
 }
 break;
 }
if(dEbb_isCalibrateing() ==  1 ){
 if (dEbb_state ==  122 ){
 dEbb_calibrateSwitch();
 } else if ( RB9_bit  !=  1 ){
 dEbb_calibrateDown();
 } else if ( RB10_bit  !=  1 ){
 dEbb_calibrateUp();
 } else
 dEbb_calibratePause();
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_gears.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_gears.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_gears.c"
void dGear_propagate(unsigned int gearCommand) {
 dGear_unsetError();
 if (gearCommand ==  0 ) {
 dGear_setNeutral();
 } else if (gearCommand ==  8 ) {
 dGear_setError();
 } else {
 dGear_unsetNeutral();
 dGear_set((unsigned char) gearCommand);
 }
}

unsigned char dGear_getCurrentGearLetter(void) {
 if (d_isNeutralSet) {
 return  58 ;
 } else if (dGear_error) {
 return  59 ;
 } else {
 return d_currentGear +  48 ;
 }
}

void dGear_setNeutral(void) {
 d_isNeutralSet =  1 ;
}

void dGear_unsetNeutral(void) {
 d_isNeutralSet =  0 ;
}

void dGear_setError(void) {
 dGear_error =  1 ;
}

void dGear_unsetError(void) {
 dGear_error =  0 ;
}

void dGear_set(unsigned char gear) {
 if (gear >  4 ) {
 gear =  4 ;
 } else if (gear <  1 ) {
 gear =  1 ;
 }
 d_currentGear = gear;
}

unsigned char dGear_get(void) {
 return d_currentGear;
}

void dGear_up(void) {
 if (dGear_canGearUp()) {
 d_currentGear += 1;
 }
}

void dGear_down(void) {
 if (dGear_canGearDown()) {
 d_currentGear -= 1;
 }
}

char dGear_canGearUp(void){
 return d_currentGear <  4  || dGear_isShiftingCheckBypassed();
}

char dGear_canGearDown(void){
 return d_currentGear >  1  || dGear_isShiftingCheckBypassed();
}

char dGear_isShiftingCheckBypassed(void){
 return dGear_bypassShiftCheck;
}

void dGear_enableShiftCheck(void){
 dGear_bypassShiftCheck =  0 ;
}

void dGear_disableShiftCheck(void){
 dGear_bypassShiftCheck =  1 ;
}

void d_setGearMotorState(int motorState) {
 d_gearMotorState = motorState;
}

unsigned char d_getGearMotorState(void) {
 return d_gearMotorState;
}

char d_canSetGear(void) {
 return d_gearMotorState ==  0 ;
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_rpm.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_rpm.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/../libs/basic.h"
#line 16 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/../libs/basic.h"
void unsignedIntToString(unsigned int number, char *text);

void signedIntToString(int number, char *text);

unsigned char getNumberDigitCount(unsigned char number);

void emptyString(char* myString);
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_ledstripe.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/display/dd_dashboard.h"
#line 15 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_rpm.h"
unsigned int dRpm = 0;

const unsigned int dRpm_stripeStep = ( 9500  -  5000 ) /  6 ;

void dRpm_set(unsigned int rpm);

unsigned int dRpm_get(void);

float dRpm_getDisplayValue(void);

char dRpm_canUpdateLedStripe(void);

void dRpm_disableLedStripeOutput(void);

void dRpm_enableLedStripeOutput(void);

void dRpm_updateLedStripe(void);
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_rpm.c"
char dRpm_ledStripeOutputEnable =  0 ;

void dRpm_set(unsigned int rpm) {
 dRpm = rpm;
 dd_Indicator_setFloatValue( 3 , dRpm_getDisplayValue());
}

unsigned int dRpm_get(void) {
 return dRpm;
}

float dRpm_getDisplayValue(void) {
 return (dRpm_get() / 10) / 100.0;
}

char dRpm_canUpdateLedStripe(void) {
 return dRpm_ledStripeOutputEnable;
}

void dRpm_disableLedStripeOutput(void) {
 dRpm_ledStripeOutputEnable =  0 ;
}

void dRpm_enableLedStripeOutput(void) {
 dRpm_ledStripeOutputEnable =  1 ;
}
#line 87 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_rpm.c"
void dRpm_updateLedStripe(void) {
 unsigned char dLedStripeState;
 if (dRpm >  5000 ) {
 dLedStripeState = (dRpm -  5000 ) / dRpm_stripeStep;
 } else {
 dLedStripeState = 0;
 }
 switch (dLedStripeState) {
 case 0:
 dLedStripe_clear();
 break;
 case 1:
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  0 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  1 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  2 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  3 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  4 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  5 );
 break;
 case 2:
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  0 );
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  1 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  2 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  3 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  4 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  5 );
 break;
 case 3:
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  0 );
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  1 );
 dLedStripe_setLedColorAtPosition( 0b00000001 ,  2 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  3 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  4 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  5 );
 break;
 case 4:
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  0 );
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  1 );
 dLedStripe_setLedColorAtPosition( 0b00000001 ,  2 );
 dLedStripe_setLedColorAtPosition( 0b00000001 ,  3 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  4 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  5 );
 break;
 case 5:
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  0 );
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  1 );
 dLedStripe_setLedColorAtPosition( 0b00000001 ,  2 );
 dLedStripe_setLedColorAtPosition( 0b00000001 ,  3 );
 dLedStripe_setLedColorAtPosition( 0b00000100 ,  4 );
 dLedStripe_setLedColorAtPosition( 0b00000000 ,  5 );
 break;
 case 6:
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  0 );
 dLedStripe_setLedColorAtPosition( 0b00000010 ,  1 );
 dLedStripe_setLedColorAtPosition( 0b00000001 ,  2 );
 dLedStripe_setLedColorAtPosition( 0b00000001 ,  3 );
 dLedStripe_setLedColorAtPosition( 0b00000100 ,  4 );
 dLedStripe_setLedColorAtPosition( 0b00000100 ,  5 );
 break;
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_start.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_start.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_start.c"
char dStart_isSwitchOnFlag =  0 ;

void dStart_switchOn(void) {
 dStart_isSwitchOnFlag =  1 ;
}

void dStart_switchOff(void) {
 dStart_isSwitchOnFlag =  0 ;
}

char dStart_isSwitchedOn(void) {
 return dStart_isSwitchOnFlag;
}

void dStart_sendStartMessage(void) {
 Can_writeByte( 0b11011000000 ,  1 );
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_hardreset.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_hardreset.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_hardreset.c"
unsigned int dHardReset_counter = 0;
int lastId=0;

void dHardReset_init(void) {
char msg[14];
int id;
int temp;
 dHardReset_counter = dHardReset_getCounter();
 dd_Indicator_setIntValue( 10 , dHardReset_counter);
}

void dHardReset_reset(void) {
 char msg[14];
 dHardReset_setFlag();
 dSignalLed_set( 1 );
 dSignalLed_set( 0 );
 dSignalLed_set( 2 );
 asm {
 reset
 }
}

char dHardReset_hasBeenReset(void) {
 return  RCONbits.SWR ;
}

void dHardReset_setFlag(void) {
 EEPROM_writeInt( ( 0x7FFDA0  + 4) , dHardReset_getCounter() + 1);
}

void dHardReset_unsetFlag(void) {
  RCONbits.SWR  =  0 ;
}

unsigned int dHardReset_getCounter(void) {
 return EEPROM_readInt( ( 0x7FFDA0  + 4) );
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_rio.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_rio.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_rio.c"
char dRio_isAcquiring =  0 ;
unsigned int dRio_isAliveCounter =  2000 ;

void dRio_switchAcquisition(void) {
 if (dRio_isAcquiring) {
 dRio_stopAcquisition();
 } else {
 dRio_startAcquisition();
 }
}

void dRio_startAcquisition(void) {
 dd_Dashboard_fireTimedMessage( 1.5 , "Started ACQ.",  0 );
 Can_writeInt( 0b11100000111 ,  1 );
}

void dRio_stopAcquisition(void) {
 dd_Dashboard_fireTimedMessage( 1.5 , "Stopped ACQ.",  0 );
 Can_writeInt( 0b11100000111 ,  2 );
}

void dRio_zeroAcquisition(void) {
 dd_Dashboard_fireTimedMessage( 1.5 , "Zeroed ACQ.",  0 );
 Can_writeInt( 0b11100000111 ,  3 );
}

void dRio_heartBeat(void) {
 dRio_isAliveCounter =  2000 ;
 dd_Indicator_setBoolValue( 6 ,  1 );
 dRio_isAcquiring =  1 ;
}

void dRio_die(void) {
 dd_Indicator_setBoolValue( 6 ,  0 );
 dRio_isAcquiring =  0 ;
}

void dRio_tick(void) {
 if (dRio_isAliveCounter > 0) {
 dRio_isAliveCounter -= 1;
 if (dRio_isAliveCounter == 0) {
 dRio_die();
 }
 }
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_acceleration.c"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_acceleration.h"
#line 7 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_acceleration.c"
void dAcc_init(void) {
 dAcc_autoAcceleration =  0 ;
 dAcc_releasingClutch =  0 ;
#line 15 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_acceleration.c"
}
#line 82 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_acceleration.c"
void dAcc_startAutoAcceleration(void){
 if(!dAcc_autoAcceleration){
 dAcc_autoAcceleration =  1 ;
 dAcc_releasingClutch =  0 ;

 }
}

void dAcc_startClutchRelease(void){
 if(!dAcc_releasingClutch){
 dAcc_releasingClutch =  1 ;

 }

}

void dAcc_stopAutoAcceleration(void) {
 if(dAcc_autoAcceleration){
 dAcc_autoAcceleration =  0 ;
 dAcc_releasingClutch =  0 ;

 }
}

char dAcc_isAutoAccelerationActive(void) {
 return dAcc_autoAcceleration;
}

char dAcc_isReleasingClutch(void) {
 return dAcc_releasingClutch;
}
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/d_can.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_warnings.c"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for dspic/include/string.h"
#line 1 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_warnings.h"
#line 13 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_warnings.h"
const unsigned char WARNINGS_LIMIT[] = {
  120 ,  12 ,  200 
};

unsigned int WARNINGS_FLAG[ 3 ];

const unsigned char WARNINGS_LIST[] = {
  5 ,  2 ,  1 
};

const unsigned char *LIMITS_DESCRIPTIONS[] = {
 "P.OIL", "V.BAT", "TH2O"
};

void dWarnings_init(void);

void dWarnings_check(void);

void dWarnings_flash(unsigned int ii);

void dWarnings_setParameter(unsigned int ii);

void dWarnings_unsetParameter(unsigned int ii);
#line 8 "c:/users/elettrodynamisprc/google drive/reparto elettronica 2017/steering wheel/firmware/dp9 aac/modules/input-output/d_warnings.c"
void dWarnings_init(void){
 unsigned int ii, indicatorsIndex;
 for(ii = 0; ii <  3 ; ii += 1){
 WARNINGS_FLAG[ii] = 0;
 }
}

void dWarinings_check(void){
 unsigned int ii, indicatorsIndex;
 for(ii = 0; ii <  3 ; ii += 1){
 indicatorsIndex = dd_Dashboard_getIndicatorIndex(WARNINGS_LIST[ii]);
 if(dd_indicators[indicatorsIndex].valueType ==  1 ){
 if(dd_indicators[indicatorsIndex].intValue > WARNINGS_LIMIT[ii]){
 if(WARNINGS_FLAG[ii] == 0){
 dWarnings_setParameter(ii);
 }
 else{
 WARNINGS_FLAG[ii] += 1;
 }
 if(WARNINGS_FLAG[ii] >=  10 ){
 WARNINGS_FLAG[ii] = 0;
 }
 }
 else if(dd_indicators[indicatorsIndex].intValue <= WARNINGS_LIMIT[ii]){
 if(WARNINGS_FLAG[ii] >= 1){
 dWarnings_unsetParameter(ii);
 }
 }
 }
 else if(dd_indicators[indicatorsIndex].valueType ==  2 ){
 if(WARNINGS_LIST[ii] ==  2 ){
 if(dd_indicators[indicatorsIndex].floatValue < WARNINGS_LIMIT[ii]){
 if(WARNINGS_FLAG[ii] == 0){
 dWarnings_setParameter(ii);
 }
 else{
 WARNINGS_FLAG[ii] += 1;
 }
 if(WARNINGS_FLAG[ii] >=  10 ){
 WARNINGS_FLAG[ii] = 0;
 }
 }
 else if(dd_indicators[indicatorsIndex].floatValue >= WARNINGS_LIMIT[ii]){
 if(WARNINGS_FLAG[ii] >= 1){
 dWarnings_unsetParameter(ii);
 }
 }
 }
 else if(dd_indicators[indicatorsIndex].floatValue > WARNINGS_LIMIT[ii]){
 if(WARNINGS_FLAG[ii] == 0){
 dWarnings_setParameter(ii);
 }
 else{
 WARNINGS_FLAG[ii] += 1;
 }
 if(WARNINGS_FLAG[ii] >=  10 ){
 WARNINGS_FLAG[ii] = 0;
 }
 }
 else if(dd_indicators[indicatorsIndex].floatValue <= WARNINGS_LIMIT[ii]){
 if(WARNINGS_FLAG[ii] >= 1){
 dWarnings_unsetParameter(ii);
 }
 }
 }
 }
}

void dWarnings_flash(unsigned int ii){
 Buzzer_bip();
 dd_Dashboard_fireTimedMessage(0.7, LIMITS_DESCRIPTIONS[ii],  1 );
}

void dWarnings_setParameter(unsigned int ii){
 WARNINGS_FLAG[ii] = 1;
 dSignalLed_set( 1 );
 dWarnings_flash(ii);
}

void dWarnings_unsetParameter(unsigned int ii){
 int nn, or = 0;
 WARNINGS_FLAG[ii] = 0;
 for(nn = 0; nn <  3 ; nn += 1){
 or += WARNINGS_FLAG[nn];
 }
 if(or == 0){
 dSignalLed_unset( 1 );
 }
}
#line 61 "C:/Users/ElettroDynamisPRC/Google Drive/REPARTO ELETTRONICA 2017/STEERING WHEEL/FIRMWARE/DP9 AAC/DP9_AAC.c"
void init(void) {
 delay_ms(100);
 setAllPinAsDigital();


 setTimer( 2 , 0.001);
 setInterruptPriority( 2 ,  5 );
 delay_ms(200);
 dd_GraphicController_init();
 delay_ms(100);

 Buttons_init();
 Buzzer_init();
 dPaddle_init();
 dLedStripe_init();
 dSignalLed_init();
 dRpm_set(0);
 dRpm_disableLedStripeOutput();

 dHardReset_init();
 Can_init();
 dAcc_init();
 dEbb_init();
 dWarnings_init();

 dRpm_enableLedStripeOutput();
 dLedStripe_clear();
}

void main() {
 char msg[14];

 if (!dHardReset_hasBeenReset()) {
 Delay_ms(250);
 }
 init();
#line 103 "C:/Users/ElettroDynamisPRC/Google Drive/REPARTO ELETTRONICA 2017/STEERING WHEEL/FIRMWARE/DP9 AAC/DP9_AAC.c"
 if (dHardReset_hasBeenReset()) {
 dd_Dashboard_fireTimedMessage(0.7, "RESET OK",  0 );
 dHardReset_unsetFlag();
 } else {
 dd_lastPrintedGearLetter =  54 ;
#line 110 "C:/Users/ElettroDynamisPRC/Google Drive/REPARTO ELETTRONICA 2017/STEERING WHEEL/FIRMWARE/DP9 AAC/DP9_AAC.c"
 }

 while (1);
}


 void timer1_interrupt() iv IVT_ADDR_T1INTERRUPT ics ICS_AUTO {
 dd_GraphicController_onTimerInterrupt();
}


 void timer2_interrupt() iv IVT_ADDR_T2INTERRUPT ics ICS_AUTO {
  IFS0bits.T2IF  = 0 ;
 Buttons_tick();
 dRio_tick();
 dEfiSense_tick();
 dLedStripe_updateFrame();
 timer2_counter0 += 1;
 timer2_counter1 += 1;
 timer2_counter2 += 1;
 timer2_counter3 += 1;

 timer2_counter5 += 1;

 if (timer2_counter0 >= 5) {
 dPaddle_readSample();
 timer2_counter0 = 0;
 }
 if (timer2_counter1 >= 25) {
 if (dStart_isSwitchedOn()) {
 dStart_sendStartMessage();
 }

 timer2_counter1 = 0;
 }
 if (timer2_counter3 >= 100) {
 if (dRpm_canUpdateLedStripe()) {
 dRpm_updateLedStripe();
 }
 dEbb_tick();

 timer2_counter3 = 0;
 }

 if (timer2_counter2 >= 10) {
 dClutch_set(dPaddle_getValue());
 dClutch_send();
 timer2_counter2 = 0;
 }


 if (timer2_counter5 >= 1000) {
 dSignalLed_switch( 2 );

 timer2_counter5 = 0;
 }
}

 void CAN_Interrupt() iv IVT_ADDR_C1INTERRUPT {
 unsigned int firstInt, secondInt, thirdInt, fourthInt;
 unsigned long int id;
 char dataBuffer[8];
 unsigned int dataLen = 0, flags = 0;


 IEC1BITS.C1IE = 0;
 Can_clearInterrupt();
 if (0 == Can_read(&id, dataBuffer, &dataLen, &flags))
 Buzzer_bip();







 if (dataLen >= 2) {
 firstInt = (unsigned int) ((dataBuffer[0] << 8) | (dataBuffer[1] & 0xFF));
 }
 if (dataLen >= 4) {
 secondInt = (unsigned int) ((dataBuffer[2] << 8) | (dataBuffer[3] & 0xFF));
 }
 if (dataLen >= 6) {
 thirdInt = (unsigned int) ((dataBuffer[4] << 8) | (dataBuffer[5] & 0xFF));
 }
 if (dataLen >= 8) {
 fourthInt = (unsigned int) ((dataBuffer[6] << 8) | (dataBuffer[7] & 0xFF));
 }

 switch (id) {
 case  0b10100000000 :
 dd_Indicator_setIntValue( 18 , firstInt);
 dd_Indicator_setIntValue( 19 , secondInt);
 break;
 case  0b11011001110 :
 dd_Indicator_setFloatValue( 15 , ((int) ((firstInt - 396.0) * 1.221)) / 100.0);
 dd_Indicator_setFloatValue( 17 , ((int) ((firstInt - 396.0) * 1.221)) / 100.0);
 dd_Indicator_setFloatValue( 18 , (thirdInt * 0.1221) - 50);
 dd_Indicator_setIntValue( 16 , ((int) ((firstInt - 396.0) * 1.221)) / 100.0);
 break;
 case  0b11000110110 :


 break;
 case  0b11000010111 :

 dClutch_injectActualValue((unsigned char)secondInt);
 break;
 case  0b11001100110 :
 dEbb_setEbbValueFromCAN(firstInt);
 dEbb_setEbbMotorSenseFromCAN(secondInt);
 dEbb_setEbbMotorStateFromCAN(thirdInt);
 dEbb_propagateEbbChange();
 break;
 case  0b01100001110 :
 dd_Indicator_setFloatValue( 1 , dEfiSense_calculateTemperature(secondInt));
 dEfiSense_heartbeat();
 break;
 case  0b01100001011 :
 dRpm_set(fourthInt);
 dEfiSense_heartbeat();
 break;
 case  0b01100001111 :
 dd_Indicator_setIntValue( 11 , firstInt);
 dd_Indicator_setIntValue( 12 , secondInt);
 dd_Indicator_setFloatValue( 13 , dEfiSense_calculateTemperature(thirdInt));
 dEfiSense_heartbeat();
 break;
 case  0b01100001000 :
 dGear_propagate(firstInt);
 dEfiSense_heartbeat();
 break;
 case  0b01100001101 :
 dd_Indicator_setFloatValue( 5 , dEfiSense_calculatePressure(firstInt));
 dd_Indicator_setFloatValue( 2 , dEfiSense_calculateVoltage(fourthInt));
 dEfiSense_heartbeat();
 break;
 case  0b11100000111 :
 if (firstInt == 1) {
 dRio_heartBeat();
 }
 break;
 case  0b11011110000 :
 switch(dataBuffer[0]){
 case MEX_READY:
 dAcc_startAutoAcceleration();
 dd_Dashboard_fireTimedMessage(1, "ACC READY",  0 );
 break;
 case MEX_GO:
 dAcc_startClutchRelease();
 dd_Dashboard_fireTimedMessage(1, "GO",  0 );
 Buzzer_bip();
 break;
 case MEX_OFF:
 dAcc_stopAutoAcceleration();
 dd_Dashboard_fireTimedMessage(1, "ACC OFF",  0 );
 break;
 }
 break;
 default:
 break;
 }


 IEC1BITS.C1IE = 1;
}
